window.searchIndex = {"fields":["title","body"],"pipeline":["trimmer","stopWordFilter","stemmer"],"ref":"id","version":"0.9.5","index":{"body":{"root":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0},"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.4142135623730951},"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":2.449489742783178},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0},"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":1.7320508075688772},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.4142135623730951},"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.7320508075688772},"https://freecx.github.io/2021-01-13-password-box/":{"tf":1.0}},"df":8,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,":":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}}}},"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"4":{"docs":{},"df":0,"2":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}},"5":{"docs":{"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}},"6":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}},"5":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}},"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1,"0":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}},"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}}},"1":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}},"1":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1,"1":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}}},"3":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1},"7":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.7320508075688772}},"df":1},"9":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.7320508075688772}},"df":1}},"1":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0},"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.7320508075688772},"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.4142135623730951},"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":5.656854249492381},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0},"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":1.0},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.7320508075688772},"https://freecx.github.io/2020-09-25-l-systems/":{"tf":2.6457513110645907},"https://freecx.github.io/2021-01-11-qr-video/":{"tf":1.0},"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0},"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0},"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":13,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}},"4":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.4142135623730951}},"df":1}}}}},"0":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.4142135623730951}},"df":2,"0":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0},"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":1.4142135623730951},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.4142135623730951},"https://freecx.github.io/2024-04-01-unga-bunga/":{"tf":1.0}},"df":4,"1":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}},"_":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}},"x":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":1.0}},"df":1}}}}},"1":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0},"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":2,"1":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}}},"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}},"1":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}},"1":{"docs":{},"df":0,"1":{"docs":{},"df":0,"1":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}}},"2":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1,"7":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"0":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,":":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"3":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":1,"1":{"docs":{},"df":0,"5":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1}}},"7":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":1,"6":{"docs":{},"df":0,".":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"4":{"docs":{},"df":0,"6":{"docs":{},"df":0,"2":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}},"m":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}},"9":{"docs":{},"df":0,"9":{"docs":{},"df":0,"3":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":1}}},"_":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"_":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}}}}}}}},"2":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0},"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0},"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.4142135623730951},"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0},"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":4.242640687119285},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.4142135623730951},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0},"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.7320508075688772},"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.7320508075688772}},"df":11,".":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1},"1":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"8":{"docs":{},"df":0,"9":{"docs":{},"df":0,"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"5":{"docs":{},"df":0,"3":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}}},"5":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}},"8":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}},"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.0}},"df":1}},"1":{"docs":{},"df":0,"6":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.7320508075688772}},"df":1},"9":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}},"2":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1},"1":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":1}}},"2":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1},"5":{"docs":{},"df":0,"5":{"docs":{"https://freecx.github.io/2021-01-13-password-box/":{"tf":1.0},"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":2},"7":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}},"7":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1},"8":{"docs":{},"df":0,"6":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}},"^":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}}},"3":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0},"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.4142135623730951},"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.0},"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0},"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.7320508075688772},"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.7320508075688772},"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":10,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}},"9":{"docs":{},"df":0,"8":{"docs":{},"df":0,"7":{"docs":{},"df":0,"5":{"docs":{},"df":0,"9":{"docs":{},"df":0,"6":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}}}},"0":{"docs":{"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":1.0}},"df":1,"0":{"docs":{"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0}},"df":1}},"2":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":1},"5":{"docs":{},"df":0,"7":{"docs":{},"df":0,"0":{"docs":{},"df":0,"6":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{},"df":0,"4":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1}}}}}}}},"d":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.4142135623730951}},"df":1}},"4":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0},"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.0},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":4,".":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"3":{"docs":{},"df":0,"8":{"docs":{},"df":0,"7":{"docs":{},"df":0,"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,"9":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}}}},"0":{"docs":{},"df":0,"4":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}},"1":{"docs":{},"df":0,"4":{"docs":{},"df":0,"0":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{},"df":0,"5":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1}}}}}}}}},"_":{"docs":{},"df":0,"2":{"docs":{},"df":0,"9":{"docs":{},"df":0,"4":{"docs":{},"df":0,"_":{"docs":{},"df":0,"9":{"docs":{},"df":0,"6":{"docs":{},"df":0,"7":{"docs":{},"df":0,"_":{"docs":{},"df":0,"2":{"docs":{},"df":0,"9":{"docs":{},"df":0,"5":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"5":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.0},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0},"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":4,"0":{"docs":{"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":2.0}},"df":1,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"1":{"docs":{},"df":0,"a":{"docs":{},"df":0,"7":{"docs":{},"df":0,"9":{"docs":{},"df":0,"9":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}}},"6":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.0},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0},"https://freecx.github.io/2021-02-20-data-coding/":{"tf":2.449489742783178}},"df":3,"2":{"docs":{},"df":0,"6":{"docs":{},"df":0,"f":{"docs":{},"df":0,"0":{"docs":{},"df":0,"f":{"docs":{},"df":0,"4":{"docs":{},"df":0,"0":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}},"4":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1},"9":{"docs":{},"df":0,"_":{"docs":{},"df":0,"9":{"docs":{},"df":0,"9":{"docs":{},"df":0,"0":{"docs":{},"df":0,"_":{"docs":{},"df":0,"6":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1}}}}}}}}}},"7":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0},"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0}},"df":2,"2":{"docs":{},"df":0,"3":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1},"1":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1},"2":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1},"3":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1},"4":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1},"5":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1}}}},"8":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.4142135623730951},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.4142135623730951}},"df":2,"0":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}},"2":{"docs":{},"df":0,"6":{"docs":{},"df":0,"5":{"docs":{},"df":0,"u":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":2}}}},"5":{"docs":{},"df":0,"2":{"docs":{},"df":0,"_":{"docs":{},"df":0,"4":{"docs":{},"df":0,"9":{"docs":{},"df":0,"3":{"docs":{},"df":0,"_":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{},"df":0,"_":{"docs":{},"df":0,"9":{"docs":{},"df":0,"2":{"docs":{},"df":0,"3":{"docs":{},"df":0,"_":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{},"df":0,"9":{"docs":{},"df":0,"_":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{},"df":0,"4":{"docs":{},"df":0,"_":{"docs":{},"df":0,"9":{"docs":{},"df":0,"8":{"docs":{},"df":0,"2":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}},"9":{"docs":{},"df":0,".":{"docs":{},"df":0,"8":{"docs":{},"df":0,"3":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}},"9":{"docs":{"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":1.4142135623730951}},"df":1}},"a":{"docs":{},"df":0,"b":{"docs":{"https://freecx.github.io/2020-09-25-l-systems/":{"tf":2.0}},"df":1,"a":{"docs":{"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.7320508075688772}},"df":1}}}},"d":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}},"k":{"docs":{},"df":0,"a":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}}}}}}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"y":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}},"i":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0},"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":2},"p":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.7320508075688772},"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.7320508075688772}},"df":2,"/":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}},"s":{"docs":{},"df":0,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"o":{"docs":{},"df":0,"f":{"docs":{},"df":0,"f":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1,")":{"docs":{},"df":0,"+":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"p":{"docs":{},"df":0,"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{},"df":0,"8":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"&":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}}}}}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"f":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}},"b":{"docs":{"https://freecx.github.io/2020-09-25-l-systems/":{"tf":2.0}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"w":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.7320508075688772}},"df":2}},"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"x":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"6":{"docs":{},"df":0,"4":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.4142135623730951}},"df":1}}},"h":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":2.0}},"df":1}}},"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.4142135623730951}},"df":1}}},"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":2.0}},"df":1}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1,":":{"docs":{},"df":0,":":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.4142135623730951}},"df":1}}}}}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"b":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":1.0}},"df":1}}}},"r":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":1,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":3.3166247903554},"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":2.449489742783178}},"df":2}}}}}}}},"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951},"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":2}}}}},"c":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":2.23606797749979},"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.4142135623730951},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.7320508075688772},"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":2.449489742783178}},"df":6,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"o":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"t":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":2.8284271247461903}},"df":1}},"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"[":{"docs":{},"df":0,"x":{"docs":{"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":1.0}},"df":1}}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}},"h":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2021-01-13-password-box/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1},"p":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.4142135623730951}},"df":1}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"m":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":2}}},"p":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}},"o":{"docs":{},"df":0,"s":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":2.0}},"df":1,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2021-01-13-password-box/":{"tf":1.0}},"df":1}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"d":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}}}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}},"d":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"e":{"docs":{},"df":0,"4":{"docs":{},"df":0,"c":{"docs":{},"df":0,"9":{"docs":{},"df":0,"a":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"d":{"docs":{},"df":0,"2":{"docs":{},"df":0,"2":{"docs":{},"df":0,"9":{"docs":{},"df":0,"d":{"docs":{},"df":0,"8":{"docs":{},"df":0,"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"8":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"d":{"docs":{},"df":0,"9":{"docs":{},"df":0,"5":{"docs":{},"df":0,"1":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"b":{"docs":{},"df":0,"u":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"o":{"docs":{},"df":0,"=":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.7320508075688772}},"df":1}}}}}}}}},"f":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"+":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"+":{"docs":{},"df":0,"d":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":4.795831523312719}},"df":1,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":2.23606797749979}},"df":1}}}}}}}},"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"f":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"x":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}},"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.4142135623730951}},"df":1}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":2.23606797749979}},"df":1}}}}}},"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}}},"g":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1},"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1}}}}}}}},"u":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":1}},"v":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1}}}}}},"x":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"u":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.4142135623730951}},"df":1}}}},"i":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}},"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1},"1":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":2.449489742783178},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":2},"2":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":2.23606797749979}},"df":1},"f":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":2.449489742783178}},"df":1}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"k":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":2.23606797749979},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":2,"_":{"docs":{},"df":0,"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}}}}}},"p":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0},"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":2},"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":1}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}},"d":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.4142135623730951}},"df":1},"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.7320508075688772}},"df":1,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,".":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0}},"df":1}}}}}}}}}}}}},"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,")":{"docs":{},"df":0,"+":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{},"df":0,"8":{"docs":{},"df":0,"+":{"docs":{},"df":0,"7":{"docs":{},"df":0,"2":{"docs":{},"df":0,"+":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"+":{"docs":{},"df":0,"7":{"docs":{},"df":0,"2":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}},"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,")":{"docs":{},"df":0,"+":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"+":{"docs":{},"df":0,"7":{"docs":{},"df":0,"2":{"docs":{},"df":0,"+":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"+":{"docs":{},"df":0,"7":{"docs":{},"df":0,"2":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}},"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}},"t":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.7320508075688772},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":3.4641016151377544}},"df":2,"h":{"docs":{},"df":0,"u":{"docs":{},"df":0,"b":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"u":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}},"o":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":2,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":2.449489742783178}},"df":1}}},"o":{"docs":{},"df":0,"g":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}}}},"t":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0},"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.4142135623730951},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":3,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.4142135623730951}},"df":1}}},"h":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}}},"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.4142135623730951}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0},"https://freecx.github.io/2023-12-02-micro-http/":{"tf":2.23606797749979}},"df":3,".":{"docs":{},"df":0,"b":{"docs":{},"df":0,"f":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.4142135623730951}},"df":1}}}}},"p":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}},"x":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0},"https://freecx.github.io/2023-12-02-micro-http/":{"tf":2.449489742783178}},"df":3,"/":{"docs":{},"df":0,"1":{"docs":{},"df":0,".":{"docs":{},"df":0,"1":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}},":":{"docs":{},"df":0,"/":{"docs":{},"df":0,"/":{"docs":{},"df":0,"l":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,":":{"docs":{},"df":0,"5":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"u":{"docs":{},"df":0,"b":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}},"5":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":2},"d":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1},"i":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.7320508075688772}},"df":1}},"p":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.4142135623730951}},"df":1}}}}},"c":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"!":{"docs":{},"df":0,"(":{"docs":{},"df":0,"\"":{"docs":{},"df":0,".":{"docs":{},"df":0,".":{"docs":{},"df":0,"/":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}},"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1,"(":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1,")":{"docs":{},"df":0,"+":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"+":{"docs":{},"df":0,"7":{"docs":{},"df":0,"2":{"docs":{},"df":0,"+":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"+":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}},".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}},"f":{"docs":{},"df":0,"o":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":2},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":1}}}}}}}}}}},"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":2}}}}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1},"l":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":1}}}},"p":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":2.0},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.7320508075688772}},"df":2},"r":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":2.23606797749979}},"df":1},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,")":{"docs":{},"df":0,"+":{"docs":{},"df":0,"5":{"docs":{},"df":0,"2":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{},"df":0,"+":{"docs":{},"df":0,"7":{"docs":{},"df":0,"2":{"docs":{},"df":0,"+":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"+":{"docs":{},"df":0,"7":{"docs":{},"df":0,"2":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"(":{"docs":{},"df":0,"n":{"docs":{},"df":0,")":{"docs":{},"df":0,".":{"docs":{},"df":0,"n":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{},"df":0,"(":{"docs":{},"df":0,")":{"docs":{},"df":0,"+":{"docs":{},"df":0,"5":{"docs":{},"df":0,"4":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"+":{"docs":{},"df":0,"7":{"docs":{},"df":0,"2":{"docs":{},"df":0,"+":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{},"df":0,"+":{"docs":{},"df":0,"8":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"v":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}},"j":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}},"m":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.0},"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":2}}}},"k":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":1,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://freecx.github.io/2021-01-13-password-box/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1}}}},"l":{"docs":{"https://freecx.github.io/2020-09-25-l-systems/":{"tf":2.449489742783178}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}},"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}},"z":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"=":{"docs":{},"df":0,"3":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}},"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}},"n":{"docs":{},"df":0,"u":{"docs":{},"df":0,"x":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":2}}}},"l":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.4142135623730951}},"df":1},"i":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":2.0}},"df":1},"v":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":3.1622776601683795}},"df":1}}},"o":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}}}}}},"t":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":1,";":{"docs":{},"df":0,"&":{"docs":{},"df":0,"l":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":1}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"&":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}},"x":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":2,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}}}}},"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}}}},"o":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"6":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"s":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.7320508075688772}},"df":1}},"v":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":1},"u":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1,"t":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}},"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"i":{"docs":{},"df":0,"g":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"_":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}},"ü":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":1}}}}}},"n":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.7320508075688772},"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.4142135623730951},"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.4142135623730951},"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":4,"1":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":2.449489742783178}},"df":1},"2":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":1},"3":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":1},"]":{"docs":{},"df":0,"5":{"docs":{},"df":0,"8":{"docs":{},"df":0,"1":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"5":{"docs":{},"df":0,"5":{"docs":{},"df":0,"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"7":{"docs":{},"df":0,"2":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"7":{"docs":{},"df":0,"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"5":{"docs":{},"df":0,"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"6":{"docs":{},"df":0,"8":{"docs":{},"df":0,"8":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"&":{"docs":{},"df":0,"n":{"docs":{},"df":0,"b":{"docs":{},"df":0,"s":{"docs":{},"df":0,"p":{"docs":{},"df":0,";":{"docs":{},"df":0,"1":{"docs":{},"df":0,"8":{"docs":{},"df":0,"4":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":2.449489742783178}},"df":1}}},"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1}},"x":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"x":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.7320508075688772}},"df":1}}}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}},"t":{"docs":{},"df":0,"h":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":2.449489742783178}},"df":1}}},"o":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.7320508075688772}},"df":1,"k":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2021-01-11-qr-video/":{"tf":1.0}},"df":1}}}},"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"o":{"docs":{},"df":0,"s":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"c":{"docs":{},"df":0,"o":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}},"t":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}},"u":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{},"df":0,"f":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}}}}}}},"p":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.4142135623730951}},"df":1},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1}}}}},"i":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1,"e":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"y":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1,"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.7320508075688772}},"df":1}}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"q":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1}}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"f":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}},"o":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":2,"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}},"g":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}},"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}}},"o":{"docs":{},"df":0,"f":{"docs":{"https://freecx.github.io/2021-01-13-password-box/":{"tf":1.0}},"df":1}}}},"s":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1},"u":{"docs":{},"df":0,"l":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}},"s":{"docs":{},"df":0,"h":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"d":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}},"y":{"docs":{},"df":0,"a":{"docs":{},"df":0,"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"o":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.4142135623730951}},"df":1}}}}},"g":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":2.23606797749979},"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.4142135623730951},"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0},"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":2.0},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.4142135623730951},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0},"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.0}},"df":8}}}}}},"q":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1,"0":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1},"r":{"docs":{"https://freecx.github.io/2021-01-11-qr-video/":{"tf":2.23606797749979}},"df":1,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2021-01-11-qr-video/":{"tf":1.0}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"c":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1,"o":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2021-01-13-password-box/":{"tf":1.4142135623730951},"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":2}}}}},"e":{"docs":{},"df":0,"f":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}},"g":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1,"e":{"docs":{},"df":0,"+":{"docs":{},"df":0,"d":{"docs":{},"df":0,"y":{"docs":{},"df":0,"n":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}},"l":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.4142135623730951}},"df":1}}}},"p":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":1}}}}}}},"q":{"docs":{},"df":0,"u":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}}}}}}}},"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"r":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"s":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}},"f":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":3.0}},"df":1}},"g":{"docs":{},"df":0,"b":{"docs":{},"df":0,"2":{"docs":{},"df":0,"4":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.4142135623730951}},"df":1}}}},"m":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1,"i":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951},"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":2}},"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}},"l":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}}},"s":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1},"u":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1,"n":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.7320508075688772},"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":2},"s":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":2.0},"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"tf":1.0},"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.0},"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0},"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":2.23606797749979},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.4142135623730951},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":8,"c":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":2.0},"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":2}}}}},"s":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.4142135623730951}},"df":2,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"c":{"docs":{},"df":0,"h":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1}}}}}},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2021-01-13-password-box/":{"tf":1.0}},"df":1}}}},"e":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2021-01-13-password-box/":{"tf":2.23606797749979},"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":3.605551275463989}},"df":2}},"q":{"docs":{},"df":0,"_":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":2.23606797749979}},"df":1}}}}}}}},"r":{"docs":{},"df":0,"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":2.0}},"df":1}}}}},"h":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1,"a":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1,"1":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1},"2":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1}}}}}}},"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":1}}},"r":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":1}}},"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"/":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"e":{"docs":{},"df":0,"x":{"docs":{},"df":0,".":{"docs":{},"df":0,"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"i":{"docs":{},"df":0,"c":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"t":{"docs":{},"df":0,".":{"docs":{},"df":0,"j":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{},"df":0,"y":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"c":{"docs":{},"df":0,"s":{"docs":{},"df":0,"s":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}},"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}},"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"p":{"docs":{},"df":0,"y":{"docs":{},"df":0,"_":{"docs":{},"df":0,"b":{"docs":{},"df":0,"e":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}}}},"o":{"docs":{},"df":0,"u":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.7320508075688772}},"df":1}},"r":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"c":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}},"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}}},"f":{"docs":{},"df":0,"i":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}},"h":{"docs":{},"df":0,"t":{"docs":{},"df":0,"t":{"docs":{},"df":0,"p":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}},"j":{"docs":{},"df":0,"s":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}},"l":{"docs":{},"df":0,"i":{"docs":{},"df":0,"b":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}},"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"m":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}}}},"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}}}}}}},"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"r":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}},"r":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"v":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":2.23606797749979}},"df":1}}}}}}}},"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0},"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":3}}},"e":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}},"p":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}},"o":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1}},"r":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"g":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}}}}},"u":{"docs":{},"df":0,"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"/":{"docs":{},"df":0,"s":{"docs":{},"df":0,"u":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}}}},"y":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.0}},"df":1,"d":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}}},"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"l":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"p":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2021-01-11-qr-video/":{"tf":1.0}},"df":1}}}}}}},"g":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1},"r":{"docs":{},"df":0,"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.4142135623730951}},"df":1}}}}},"e":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{},"df":0,"l":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{},"df":0,"e":{"docs":{},"df":0,".":{"docs":{},"df":0,"t":{"docs":{},"df":0,"x":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}}},"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{},"df":0,"r":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1}}}}}}}},"i":{"docs":{},"df":0,"m":{"docs":{},"df":0,"e":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{},"df":0,"a":{"docs":{},"df":0,"m":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}}}}}}},"n":{"docs":{},"df":0,"i":{"docs":{},"df":0,".":{"docs":{},"df":0,"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{},"df":0,"/":{"docs":{},"df":0,"o":{"docs":{},"df":0,"b":{"docs":{},"df":0,"j":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"t":{"docs":{},"df":0,"s":{"docs":{},"df":0,"/":{"docs":{},"df":0,"a":{"docs":{},"df":0,"9":{"docs":{},"df":0,"/":{"docs":{},"df":0,"d":{"docs":{},"df":0,"3":{"docs":{},"df":0,"7":{"docs":{},"df":0,"c":{"docs":{},"df":0,"5":{"docs":{},"df":0,"6":{"docs":{},"df":0,"0":{"docs":{},"df":0,"c":{"docs":{},"df":0,"6":{"docs":{},"df":0,"a":{"docs":{},"df":0,"b":{"docs":{},"df":0,"8":{"docs":{},"df":0,"d":{"docs":{},"df":0,"4":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{},"df":0,"b":{"docs":{},"df":0,"f":{"docs":{},"df":0,"4":{"docs":{},"df":0,"7":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"e":{"docs":{},"df":0,"8":{"docs":{},"df":0,"c":{"docs":{},"df":0,"4":{"docs":{},"df":0,"2":{"docs":{},"df":0,"e":{"docs":{},"df":0,"8":{"docs":{},"df":0,"5":{"docs":{},"df":0,"7":{"docs":{},"df":0,"7":{"docs":{},"df":0,"1":{"docs":{},"df":0,"6":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"e":{"docs":{},"df":0,"2":{"docs":{},"df":0,"/":{"docs":{},"df":0,"9":{"docs":{},"df":0,"a":{"docs":{},"df":0,"0":{"docs":{},"df":0,"f":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{},"df":0,"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"8":{"docs":{},"df":0,"8":{"docs":{},"df":0,"9":{"docs":{},"df":0,"9":{"docs":{},"df":0,"3":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{},"df":0,"5":{"docs":{},"df":0,"e":{"docs":{},"df":0,"6":{"docs":{},"df":0,"d":{"docs":{},"df":0,"3":{"docs":{},"df":0,"4":{"docs":{},"df":0,"9":{"docs":{},"df":0,"4":{"docs":{},"df":0,"e":{"docs":{},"df":0,"9":{"docs":{},"df":0,"0":{"docs":{},"df":0,"5":{"docs":{},"df":0,"a":{"docs":{},"df":0,"e":{"docs":{},"df":0,"e":{"docs":{},"df":0,"0":{"docs":{},"df":0,"1":{"docs":{},"df":0,"9":{"docs":{},"df":0,"d":{"docs":{},"df":0,"4":{"docs":{},"df":0,"b":{"docs":{},"df":0,"5":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}},"o":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"t":{"docs":{},"df":0,"m":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2021-02-20-data-coding/":{"tf":1.0}},"df":1}}}}}},"o":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}},"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"s":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"i":{"docs":{},"df":0,"s":{"docs":{},"df":0,".":{"docs":{},"df":0,"y":{"docs":{},"df":0,"m":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}}}}}}}},"e":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":1}}},"t":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.4142135623730951}},"df":1}},"u":{"docs":{},"df":0,"t":{"docs":{},"df":0,"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"i":{"docs":{"https://freecx.github.io/2023-03-27-easy-gamedev/":{"tf":1.4142135623730951}},"df":1}}}}}},"u":{"docs":{},"df":0,"3":{"docs":{},"df":0,"2":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}},"n":{"docs":{},"df":0,"k":{"docs":{},"df":0,"n":{"docs":{},"df":0,"o":{"docs":{},"df":0,"w":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}},"s":{"docs":{},"df":0,"a":{"docs":{},"df":0,"f":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}},"w":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"p":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}},"p":{"docs":{},"df":0,"d":{"docs":{},"df":0,"a":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0}},"df":1}}}},"r":{"docs":{},"df":0,"b":{"docs":{},"df":0,"a":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0}},"df":1}}}}},"v":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1,"2":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0}},"df":1},"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"<":{"docs":{},"df":0,"_":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}},"i":{"docs":{},"df":0,"r":{"docs":{},"df":0,"t":{"docs":{},"df":0,"u":{"docs":{},"df":0,"a":{"docs":{},"df":0,"l":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1}}}}}},"m":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.0}},"df":1,"_":{"docs":{},"df":0,"a":{"docs":{},"df":0,"s":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2019-08-29-simple-register-vm/":{"tf":1.4142135623730951}},"df":1}}}}},"o":{"docs":{},"df":0,"l":{"docs":{},"df":0,"u":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}},"w":{"docs":{},"df":0,"e":{"docs":{},"df":0,"b":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}},"g":{"docs":{},"df":0,"e":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}},"i":{"docs":{},"df":0,"k":{"docs":{},"df":0,"i":{"docs":{},"df":0,"p":{"docs":{},"df":0,"e":{"docs":{},"df":0,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"a":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}}}}}},"r":{"docs":{},"df":0,"e":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.4142135623730951}},"df":1}}},"o":{"docs":{},"df":0,"r":{"docs":{},"df":0,"k":{"docs":{"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.0}},"df":1,"d":{"docs":{},"df":0,"i":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}},"l":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0},"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0},"https://freecx.github.io/2023-12-02-micro-http/":{"tf":2.23606797749979}},"df":3}}}}},"x":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.4142135623730951},"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.4142135623730951}},"df":2,"8":{"docs":{},"df":0,"6":{"docs":{},"df":0,"_":{"docs":{},"df":0,"6":{"docs":{},"df":0,"4":{"docs":{"https://freecx.github.io/2020-02-22-biguint-fib/":{"tf":1.0}},"df":1}}}}},"o":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":2.23606797749979},"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":2,"s":{"docs":{},"df":0,"h":{"docs":{},"df":0,"i":{"docs":{},"df":0,"f":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.7320508075688772},"https://freecx.github.io/2023-12-02-micro-http/":{"tf":1.4142135623730951}},"df":2,"1":{"docs":{},"df":0,"2":{"docs":{},"df":0,"8":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.4142135623730951}},"df":1}}}}}}}}}},"y":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}},"z":{"docs":{},"df":0,"s":{"docs":{},"df":0,"c":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0}},"df":1}}}}},"y":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.4142135623730951},"https://freecx.github.io/2020-02-26-cellular-automaton/":{"tf":1.0},"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.4142135623730951}},"df":3},"z":{"docs":{"https://freecx.github.io/2017-09-14-simple-logic/":{"tf":1.0},"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":2,"a":{"docs":{"https://freecx.github.io/2021-04-14-find-a-cat/":{"tf":1.0}},"df":1}}}},"title":{"root":{"docs":{},"df":0,"1":{"docs":{},"df":0,"0":{"docs":{},"df":0,"0":{"docs":{"https://freecx.github.io/2024-04-01-unga-bunga/":{"tf":1.0}},"df":1}}},"2":{"docs":{},"df":0,".":{"docs":{},"df":0,"5":{"docs":{},"df":0,"d":{"docs":{"https://freecx.github.io/2020-07-23-2-5d-effect/":{"tf":1.0}},"df":1}}}},"7":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1},"b":{"docs":{},"df":0,"r":{"docs":{},"df":0,"a":{"docs":{},"df":0,"i":{"docs":{},"df":0,"n":{"docs":{},"df":0,"f":{"docs":{},"df":0,"u":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{"https://freecx.github.io/2021-12-29-bf-interp/":{"tf":1.0},"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":2}}}}}}}}},"d":{"docs":{},"df":0,"o":{"docs":{},"df":0,"c":{"docs":{},"df":0,"k":{"docs":{},"df":0,"e":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2016-02-15-working-with-docker/":{"tf":1.0}},"df":1}}}}}},"g":{"docs":{},"df":0,"i":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2020-09-04-simple-git-server/":{"tf":1.0},"https://freecx.github.io/2020-09-05-fake-git-server/":{"tf":1.0}},"df":2}}},"l":{"docs":{"https://freecx.github.io/2020-09-25-l-systems/":{"tf":1.0}},"df":1,"l":{"docs":{},"df":0,"v":{"docs":{},"df":0,"m":{"docs":{"https://freecx.github.io/2022-04-11-bf-llvm/":{"tf":1.0}},"df":1}}}},"p":{"docs":{},"df":0,"y":{"docs":{},"df":0,"t":{"docs":{},"df":0,"h":{"docs":{},"df":0,"o":{"docs":{},"df":0,"n":{"docs":{"https://freecx.github.io/2016-12-26-python-music-synth/":{"tf":1.0}},"df":1}}}}}},"q":{"docs":{},"df":0,"r":{"docs":{"https://freecx.github.io/2021-01-11-qr-video/":{"tf":1.0}},"df":1}},"r":{"docs":{},"df":0,"u":{"docs":{},"df":0,"s":{"docs":{},"df":0,"t":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}},"v":{"docs":{},"df":0,"e":{"docs":{},"df":0,"c":{"docs":{},"df":0,"<":{"docs":{},"df":0,"_":{"docs":{"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"tf":1.0}},"df":1}}}}}}}},"documentStore":{"save":true,"docs":{"https://freecx.github.io/":{"body":"","id":"https://freecx.github.io/","title":""},"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"body":"На протяжении нескольких дней мне всё время не давал покоя вопрос: каким способом лучше всего\nвывести данные n-того элемента? Допустим у нас есть вектор некоторых значений (u32 или i32)\nи мы хотим вывести на печать второй элемент.\n\nРеализации\nОчевидный вариантом является явное обращение по индексу к элементу\n\nНо сколько есть способов получить элемент из списка и в чём различия между ними?\nХорошим тоном было бы использование функции get. В случае если индекс выходит за пределы\nнашего вектора мы могли бы обработать данную ситуацию и сообщить об ошибке.\nВ данном случае я использовал unwrap как более простой способ распаковки\nполученного значения (как и в последующих), который в случае ошибки корректно (но с паникой)\nзавершит программу и выведет подробности о проблеме.\n\nЕщё одним способом получения n-того элемента из вектора является\nиспользование итератора и метода\nnth\n\nкак и композиция методов\nskip и\nnext\n\nТак же можно обратится к трейту Index\nи использовать его для доступа к значению\n\nНу и под конец самое интересное — использование unsafe методов.\nТут у нас не очень большой выбор: использовать метод get_unchecked или прямое обращение к\nуказателю, ну или почти прямое :).\nИспользование get_unchecked выглядит следующим образом\n\nИ обращение к указателю, где нужно использовать разыменование\n\nСравнение и результаты\nЗакончив с кодом перейдём к сравнению данных методов. Для этого используем несколько видов\nкомпиляции и будем сравнивать по размеру выходного файла\n\ndefault: $ rustc\nrelease: $ rustc -O -C debuginfo=0\nrelease+lto: $ rustc -O -C debuginfo=0 -C lto\nrelease+dynamic: $ rustc -O -C debuginfo=0 -C prefer-dynamic\n\nМетод\\Оптимизацияdefaultreleaserelease+ltorelease+dynamic\n[n]581&nbsp;552572&nbsp;768543&nbsp;68810&nbsp;184\nget(n)+248+72+80+72\niter().nth(n)+5216+72+80+72\niter().skip(n).next()+5456+72+80+80\nindex(n)+80+72+80+80\nget_unchecked(n)+168+72+80+72\nas_ptr().offset(n)+56000\n\nЛучшие результаты показали два метода (если не считать компиляцию без оптимизации) — [n] и\nas_ptr().offset(n), оно и очевидно в следствии прямого доступ к переменной.\nМетод основанный на index(n) показал стабильный результат в не зависимости от оптимизации кода.\nОстальные имеют стабильный размер при оптимизации, что приводит к мысли — они все преобразуются к\nодному виду.\nДелаю из всего этого вывод: используйте соответствующим метод под конкретную задачу, но всё-таки\nпрямое обращение по индексу наиболее экономное :)\nПолезные ссылки\n[1] The Rust Standard Library\n[2] The Rust Programming Language: eng,\nrus\n[3] Rust Playground\n","id":"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/","title":"7 способов получения значения из Vec<_> в Rust"},"https://freecx.github.io/2016-02-15-working-with-docker/":{"body":"Сегодня мы немного поиграем с виртуализацией на уровне операционной системы с помощью Docker.\nДля начала немного информации с википедии для общего развития\n\nDocker — программное обеспечение для автоматизации развёртывания и управления приложениями в среде\nвиртуализации на уровне операционной системы, например LXC. Позволяет «упаковать» приложение со всем его\nокружением и зависимостями в контейнер, который может быть перенесён на любой Linux-системе с поддержкой\ncgroups в ядре, а также предоставляет среду по управлению контейнерами.\nРазрабатывается и поддерживается одноимённой компанией-стартапом, распространяется как свободное\nпрограммное обеспечение под лицензией Apache 2.0. Написан на языке Go.\n\nА теперь к делу!\nУстановка\nДля начала проверим версию установленного ядра\n\nВерсия ядра должна быть не ниже 3.10, для того чтобы можно было использовать Docker.\nВ зависимости от используемого дистрибутива установка Docker выглядит по разному. Настоятельно рекомендую\nобратится к официальному гиду по установке.\nВ моём случае установка под Arch Linux выполняется одной командой:\n\nТакже вы можете установить Docker используя sh скрипт. Для загрузки скрипта потребуется wget или\ncurl, или также можно использовать браузер.\n\nТеперь запустим установку (не забыв про sudo/su).\n\nПосле установки желательно добавить используемого пользователя в группу docker.\n\nили\n\nНа этом установка закончена. Запустим демон docker (в моём случае через systemd)\n\nи проверим работоспособность следующей командой\n\nЕсли всё хорошо, то Docker скачает и запустит данный контейнер и программа выведет следующее\n\nОсновные команды\nВесь список доступных команд можно получить использую флаг --help\nРассмотрим только основные из них\n\nbuild — используется для сборки контейнера (необходим конфигурационный файл Dockerfile)\ncommit — зафиксировать изменения произведённые в контейнере\nimages — возвращает список доступных образов-контейнеров для использования\nps — возвращает список контейнеров и их статусы\npull — стянуть образ из репозитория\npush — протолкнуть образ в репозиторий\nrestart — перезапустить контейнер\nrm — удалить один или более контейнер\nrmi — удалить один или более образ контейнера\nrun — запустить команду в новом контейнере\nstart — запустить контейнер\nstop — остановить контейнер\n\nИспользование Docker на примерах\nЗапуск bash\nДавайте сначала запустим простой контейнер с bash интерпретатором в нём и получим доступ к нему.\nСкачаем образ-контейнер base/archlinux для экспериментов.\n\nПри вызове команды images получим что-то в виде:\n\nТеперь у нас есть образ для создания контейнеров. Можно перейти непосредственно к запуску bash\nвнутри контейнера. Делается это следующей командой\n\nИспользуемые флаги\n\n-i — включение интерактивного режима (для работы с STDIN)\n-t — подключение псевдо-TTY (связь терминала контейнера с нашим терминалом)\n--entrypoint — переопределяет точку входа для контейнера (в нашем случае bash)\n\nВ случае успеха Docker перенаправит нас на созданный tty внутри контейнера\n\nЗдесь можно выполнять любые действия, а после зафиксировать изменения в контейнере. Но на текущий\nмомент просто ограничимся запуском.\nДля получения информации по запущенным контейнерам используйте флаг ps.\n\nПо умолчанию Docker сам выдаёт названиям созданным контейнерам. В нашем случае — sleepy_bell,\nно их также можно задавать вручную используя флаг --name. Для выхода из контейнера используйте\nкоманду exit.\nЗапуск сайта\nРассмотрим более интересный случай, когда нужно собрать свой контейнер и подключить каталог к нему.\nБудем рассматривать развёртывание простого flask приложения на python. Все действия будем производить\nв текущем каталоге.\nСодержимое файла app/main.py\n\nДля создания своего контейнера создадим файл с конфигурацией — Dockerfile, со следующим содержимым\n\nРассмотрим файл построчно\n\nFROM base/archlinux — указывает на каком образе основывать новый образ-контейнер\nMAINTAINER dr.FreeCX &lt;email&gt; — указывает автора или сопровождающего этого контейнера\nRUN pacman -Sy &amp;&amp; pacman -S python-flask python-pip --noconfirm — запускает в контейнере обновление\nи установку пакетов\nWORKDIR /app — указывает на рабочую директорию данного контейнера\nEXPOSE 5000 — устанавливаем открываемый порт\nVOLUME [\"/app\"] — указывает на подключаемый пользовательский том\nCMD [\"python\", \"/app/main.py\"] — отвечает за запуск команды в контейнере\n(её можно переопределить используя флаг --entrypoint при запуске контейнера).\n\nНа третьем шаге команды объединены в одну для того чтобы не создавать лишние коммиты в создаваемом\nконтейнере.\nТеперь необходимо собрать данный контейнер, для этого используем команду build\n\nФлаг -t отвечает за имя контейнера-образа (ну или tag) и точка в конце команды указывает на поиск\nфайла Dockerfile в текущей директории.\nЕсли всё прошло удачно, то увидим следующее\n\nВыполнив команду images убедимся, что появился новый образ\n\nТеперь осталось самое интересное — запуск нашего контейнера. Давайте же сделаем это\n\nИспользуемые флаги\n\n-d — запустить контейнер в фоне\n-p — привязывает порт (на текущей машине 8080 к порту в контейнере 5000)\n-v — подключает пользовательский том (\"$PWD/app\" на машине к \"/app\" в контейнере)\n\nКак результат по адресу 0.0.0.0:8080 становится доступно flask-приложение.\nДля остановки контейнера воспользуемся командой stop указав в качестве параметра имя либо container id\n\nПара слов о Docker compose\n\nДанный раздел находится в слишком пассивном написании!\n\nТеперь когда мы немного разобрались с docker'ом, давайте рассмотрим более интересную штуку, такую как Docker Сompose!\nКак говорит официальная документация\n\nCompose is a tool for defining and running multi-container Docker applications.\n\nто есть это тулза с помощью которой можно собрать систему из нескольких связанных docker-контейнеров, что мы и сделаем!\nЧто будем ваять?\nДавайте напишем web-приложение доску, где можно будет оставить комментарий.\nДля этого нам понадобится несколько компонентов:\n\nflask — наш микрофреймворк\npostgresql — наша БД\nnginx — http-сервер\n\nКонечно можно обойтись без nginx, но почему бы и нет?!\nСтруктура нашего проекта будет следующей:\n\nНо начнём по порядку!\nПриложение\nПриложение будет реализовывать две функции:\n\nдобавление данных в БД\nи отображение\n\nmain.py\n\nconfig.py\n\ncreate_db.py\n\nindex.html\n\nrequirements.txt\n\nDockerfile\n\nnginx\nDockerfile\n\nflask_project\n\nКонфиги Docker Compose\n.env\n\ndocker-compose.yml\n\nФинал\nСобираем наши контейнеры\n\nCоздаём таблицу в БД\n\nИ наконец поднимаем их\n\nТеперь можно открыть сам веб-сервис в браузере http://localhost:5000.\nДля остановки работы контейнеров выполните следующую команду в директории с проектом\n\nИсходный код всего проекта доступен в репозитории.\nВот и всё на сегодня.\nПолезные ссылки\n[1] Docker -- официальный сайт.\n[2] Docker Hub -- хранилище Docker контейнеров.\n[3] Docker Compose -- работа с мультиконтейнерами.\n[4] Flask -- микрофреймворком для создания вебсайтов на языке Python.\n[5] PostgreSQL -- свободная объектно-реляционная система управления базами данных.\n","id":"https://freecx.github.io/2016-02-15-working-with-docker/","title":"Используем Docker"},"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"body":"Давно я не писал что-то в свой блог. Надо исправлять данное недоразумение.\nТак что давайте напишем генератор звука для азбуки Морзе.\nТеория\nЗдесь должна быть теория по генерации звука, но мне как-то лень, поэтому читайте её по ссылкам приведённым в конце статьи.\nТрансляция текста\nДля начала нам нужно написать код для трансляции текста в кодовую азбуку Морзе, для этого воспользуемся возможностью предоставляемую нам словарём.\nДля написания кода я буду использовать язык Rust и библиотеку lazy_static.\n\nТеперь у нас есть функционал отвечающий за преобразования текста в код Морзе.\nТак давайте перейдём к генерации звука!\nГенерация звука\nКак и писал ранее, вся теория по генерации звука находится в конце. За справкой обращайтесь туда.\nЯ же покажу всё в виде кода. Для генерации звука будем использовать синус. Нам понадобится только три параметра:\n\nчастота, Герцы\nпродолжительность, секунды\nгромкость, значение в интервале [0, 1].\n\nСобственно код:\n\nОбратите внимание, что я использовал функцию определяющую порядок представления байт в итоговом файле.\nОна является не столь важным элементом, но мы же хорошие программисты и хотим быть точно уверены в правильном\nпредставлении звука.\nСобираем звуковую дорожку\nТеперь когда мы имеем транслятор и генератор остаётся только собрать всё в одну дорожку.\nПлан у нас такой:\n\nсгенерировать звука для 'точки'\nсгенерировать звук для 'тире'\nсгенерировать звук для паузы\nсобрать дорожку по строке с кодом Морзе\n\nДля звука 'точки' будем использовать частоту в 300 Герц длительностью 0.15 и громкостью 1. Остальную\nинформацию возьмём из вики:\n\nЗа единицу времени принимается длительность одной точки. Длительность тире равна трём точкам. Пауза между элементами одного знака — одна точка, между знаками в слове — 3 точки, между словами — 7 точек\n\n\nЗапись в файл и воспроизведение\nНа данном мы уже имеем сгенерированную звуковую последовательность, но для того чтобы его прослушать нам\nнеобходимо либо отправить звук на устройство вывода, либо записать в файл.\nМы пойдем по пути наименьшего сопротивления и просто запишем данные в файл. А для того чтобы прослушать\nполучившуюся мелодию используем консольную утилиту ffplay.\nНе будем слишком многословны и перейдём сразу к коду\n\nПосле компиляции и выполнения данного кода получим на выходе файл generated.sound. Прослушать его\nможно следующей командой:\n\nНа этом всё и до встречи через полгода :)\nПолезные ссылки\n[1] Азбука Морзе\n[2] Процедурная генерация звука в реальном времени\n[3] Программная генерация звуков\n[4] Программный синтезатор\n","id":"https://freecx.github.io/2016-09-07-sound-generator-for-morse/","title":"Пишем простой генератор звука для азбуки Морзе"},"https://freecx.github.io/2016-12-26-python-music-synth/":{"body":"В [предыдущем посте]({% post_url 2016-09-07-sound-generator-for-morse %}) я писал про генерацию звука на Rust`е для азбуки Морзе.\nСегодняшняя статья будет короткой, но в ней мы рассмотрим написание упрощенной версии программного синтезатора.\nНу что же, поехали!\nГенерация звука\nНе будем изобретать что-то новое, а возьмём функцию генерации звука [из прошлой статьи]({% post_url 2016-09-07-sound-generator-for-morse %}) и адаптируем её под python:\n\nТеперь, когда у нас есть функция генерации звука любой частоты, длительности и громкости, остаётся сгененрировать ноты из первой октавы и подать их на устройство воспроизведения.\nГенерация звука нот\nЗапишем частоты нот первой октавы в массив и напишем функцию, которая будет их генерировать\n\nОстаётся последнее — вывести звук.\nВывод звука\nДля вывода звука будем использовать кроссплатформенную библиотеку PyAudio.\nТак же нам понадобится как-то отслеживать нажатия клавиш, чтобы наша программа была похожа на настоящий синтезатор. Поэтому я взял pygame, т.к. он прост в работе. Вы же можете использовать то, что вам больше нравится!\nНе будем медлить. Начнём!\n\nВот и всё. Наш минимальный синтезатор готов!\nПолезные ссылки\n[1] [Предыдущий пост]({% post_url 2016-09-07-sound-generator-for-morse %})\n[2] Исходный код с модификациями\n[3] Документация по PyAudio\n[4] Документация по pygame\n[5] Программный синтез звука на ранних персональных компьютерах #1\n[6] Программный синтез звука на ранних персональных компьютерах #2\n","id":"https://freecx.github.io/2016-12-26-python-music-synth/","title":"Пишем простой синтезатор на Python"},"https://freecx.github.io/2017-09-14-simple-logic/":{"body":"Сегодня мы реализуем программу для симуляции логических схем.\nКонечно с помощью неё нельзя будет реализовать такие схемы как:\n\nтриггер\nячейка памяти\nи многие другие (все те, что имеют обратную связь)\n\nно для написания простого сумматора - самое то!\nБазовые составляющие\nДля простоты реализации писать будем на Python. Забегу вперёд и скажу, что наша базовая реализация займёт не больше 100 строчек кода. Можно и меньше, но мы за этим не будем гнаться.\nДавайте определим что нам будет нужно чтобы эмулировать работу самого простого элемента?\n\nОн должен иметь входы/выходы\nИметь возможность получать сигнал на вход и отдавать на выходе\nВыполнять некое преобразование между входным и выходным сигналом\n\nДля определенность возьмём элемент NAND. В привычных для многих функциях он будет выглядеть так:\n\nЭто базовый элемент, который используется в электронике и он послужит нам отправной базой в нашей программе.\nНапишем каркас для нашего элемента.\nПишем базовый элемент\n\nТеперь мы можем проверить работоспособность нашего элемента. Напишем для него небольшую программу, которая пройдёт по таблице истинности и выведет результаты.\n\nЗапустим и посмотрим на результат\n\nОтлично, результат соответствует таблице истинности!\nУсложняем элемент\nТеперь обобщим наши действия, т.е. введём ещё пару правил:\n\nпусть элемент может содержать в себе произвольное количество других элементов\nэлементы внутри другого элемента можно соединять проводами\n\nЧто же это значит для нас?\nТолько то, что нужно будет:\n\nзадавать при инициализации количество входов и выходов\nопределять элементы и провода\nдобавить пару функций отвечающие за работу с проводами и новыми элементами\nпеределать функцию execute\n\nНачнём по порядку\n\nНаверное нужно остановится на списках elements и wires.\nelements будет содержать объекты Element к которым можно будет обращаться по индексу, а wires будет содержать все связи входных и выходных проводов между элементами.\nПойдём дальше и добавим функции для работы с элементами и проводами\n\nВроде всё просто! Да?\nА теперь самое главное, функция execute.\n\nОстановимся на данном моменте и подумаем...\nВ голову сразу приходит несколько вопросов:\n\nКак исполнять код для вложенных элементов?\nКак идентифицировать входные и выходные провода?\nКак вообще различить внутренние и внешние провода?\n\nНа 2 и 3 вопрос можно ответить сразу:\n\nввести in_self и out_self — для входов и выходов данного элемента\nи in и out — для внутренних элементов\n\nПлюс будем передавать идентификатор элемента и номер входа/выхода, т.е. когда мы будем соединять элементы, то будем использовать следующий код\n\nгде element — имя самого элемента, ('in_self', 0) — нулевой вход у этого элемента,\nа ('in', e_id, 0) — вход у внутреннего элемента e_id на нулевом проводе\nДля ответа на первый вопрос нам нужно либо реализовать хитрый алгоритм, который будет обходить все элементы в определенном порядке, либо схалтурить и просто последовательно идти по проводам и выполнять код на элементе только в определенный момент (когда выставлены все сигналы на входе). В данном случае нам только придётся последовательно указывать провода, а то логика вычисления может быть нарушена и мы получим неверный результат.\nЯ думаю вы уже поняли каким путём мы пойдём :)\n\nВот и всё! Конечно код не супер идеальный и скорее всего с ошибкой в логике исполнения, но он работает :)\nИ для миниатюрного симулятора логики этого будет достаточно!\nПолный листинг кода\n\nРеализация сумматора\nЕсли мы честно хотим реализовать сумматор используя класс Element, то для начала нам нужно создать ещё несколько логических элементов.\nРеализовывать мы его будем через два полусумматора, а также нам будут нужны ещё и следующие элементы:\n\nNOT\nAND\nOR\nXOR\n\nЭлемент NOT\nЭлемент NOT достаточно легко будет реализовать, нужно всего лишь подать один и тот же сигнал на обе ноги NAND.\n\nРеализуем в коде\n\nЭлемент AND\nЭлемент AND реализуем через только что написанный NOT и опять же NAND.\n\nПишем код\n\nЭлемент OR\nЭлемент OR реализуем используя три NAND.\n\nРеализуя следующим кодом\n\nЭлемент XOR\nЭлемент XOR реализуем используя NAND, AND и OR.\n\nРеализация будет следующая\n\nПолусумматор\nНастало время написать полусумматор. Для этого нам понадобятся два элемента: XOR и AND.\nТаблица истинности полусумматора выглядит следующим образом\nXYSC\n0000\n0110\n1010\n1101\n\nгде X и Y — входы, а S и C — сумма и бит переноса, и они определяются следующими выражениями\n\nНапишем его реализацию\n\nСумматор\nНаконец-то мы подошли к самому сумматору!\nДля его реализации нам понадобятся два полусумматора и элемент OR.\nТаблица истинности следующая\nXYZSC\n00000\n10010\n01010\n11001\n00110\n10101\n01101\n11111\n\nгде X и Y — входы, Z — входной бит переноса, S — выходная сумма, C — выходной бит переноса.\nДавайте же наконец напишем его\n\nПолный листинг представлен ниже\n\nПослесловие\nЧто имеем в итоге:\n\nреализовали простой симулятор логики\nреализовали простые элементы на базе NAND:\n\nNOT\nAND\nOR\nXOR\n\n\nреализовали полусумматор и сумматор\n\nНа этом сегодня всё!\nПолезные ссылки\n\nСимулятор с примерами на Rust\nWikipedia\nGoogle\n\n","id":"https://freecx.github.io/2017-09-14-simple-logic/","title":"Пишем эмулятор простых логических схем"},"https://freecx.github.io/2019-08-29-simple-register-vm/":{"body":"Что-то давно я не писал в свой блог. Нужно исправлять данное недоразумение.\nИ сегодня в программе: регистровая виртуальную машину на языке Rust.\nВведение\nНа написание собственной упрощенной версии меня вдохновили несколько статей с хабра, ссылки на них смотри в разделе [Полезные ссылки](#Полезные ссылки).\nНо для начала давайте определимся с терминалогией с помощью вики.\n\nВиртуальная машина (VM, от англ. virtual machine) — программная и/или аппаратная система, эмулирующая аппаратное обеспечение некоторой платформы (target — целевая, или гостевая платформа) и исполняющая программы для target-платформы на host-платформе (host — хост-платформа, платформа-хозяин) или виртуализирующая некоторую платформу и создающая на ней среды, изолирующие друг от друга программы и даже операционные системы (см.: песочница); также спецификация некоторой вычислительной среды (например: «виртуальная машина языка программирования Си»).\n\nВ общем разработанная нами программа не является в полной мере виртуальной машиной, а скорее всего её стоит называть интерпретатором кода. Эти разбирательства в терминологии я оставляю на читателя.\nДавайте теперь перейдём к определение стековой машины — в общем говоря их два вида: стековая и регистровая и исходя из названий можно понять, что стековая машина использует для расчёт стек, а регистровая регистры... Но это не совсем так, в основном стековая использует только стек, а вот регистровая может использовать регистры и стек. Но это опять же терминологические фишки.\nМы же в своей реализации будем использовать только регистровую модель.\nВроде определились со всеми важными аспектами и теперь можно перейти к примеру, на котором будем проводить тесты.\nТестовый пример\nНаша задачка основана на Гипотезе Коллатца и звучит вот так:\n\nВ нашем же примере будем делать расчёт от единицы до миллиона и для интереса реализуем её на нескольких языках:\n\nдля языка Python\nдля языка Rust\nдля нашей виртуальной машин, назовём её vm_asm\n\nТакже стоит уточнить, что реализацию будем делать наивную чтобы не мучится с оптимизацией, да и это не самоцель для данного поста.\nАлгоритм нахождения длины цепочки\nВходные параметры:\n\nstart_value — начальное значение\n\nВыходные параметры:\n\nseq_length — длина последовательности\n\nАлгоритм:\n\nустановить значение start_value в 0\nцикл пока seq_length &gt; 1\n\nесли остаток от деления seq_length на 2 равен нулю, то:\n\nподелить с округлением вниз start_value на 2\nувеличить seq_length на 1\n\n\nиначе\n\nумножить start_value на 3 и прибавить единицу\nподелить с округлением вниз start_value на 2\nувеличить seq_length на 2\n\n\n\n\n\nВы могли заметить, что в блоке с \"иначе\" мы делаем сразу два шага и вы будете правы. Это небольшая оптимизация, на которую я пошёл :)\nРеализация на Python\nНа Python код будет выглядеть следующим образом:\n\nОстаётся только перебрать все значения от 1 и до 1_000_000 включительно и выбрать максимально длинную цепочку, что можно сделать вот так:\n\nРеализация на Rust\nРеализация на языке Rust мало чем отличается от питоновского, лишь только синтаксис по другому выглядит и используется функция main.\n\nРеализация на виртуальной машине\nПриступим к самому интересному, а именно к коду для виртуальной машины.\nЯ буду полагаться на Intel-подобный синтаксис ассемблера, т.к. он намного привычнее выглядит чем от AT&amp;T.\nИ да, программа будет на ассемблере, так как его опкоды с операндами намного легче парсить, чем любой императивный язык программирования.\nНачнём!\nСначала произведём инициализацию регистров необходимыми значениями\n\nОпределим внешний цикл от for\n\nИ последующий за ней блок с \"функцией\"\n\nВнутренний цикл while выглядит немного мудрено, но это по сути прямой перенос питоновского кода на ассемблер\n\nОстаётся только выбрать максимальное значение цепочки и вывести на печать значение, если обход закончен\n\nРеализация интерпретатора\nТак как я не очень хочу реализовывать весь функционал какого-то процессора, то ограничимся небольшим набором команд, который нужен нам для решения задачки.\nИсходя ранее написанного кода можно выделить следующий набор команд:\n\nmov #1, #2 — поместить значение из #2 в #1\ncmp #1, #1 — сравнить #1 и #2 и изменить регистровые флаги\njg #1 — перейти к #1 если F1 равен 0\njle #1 — перейти к #1 если F1 не равен 0\njne # — переход к #1 если F2 равен 0\njmp #1 — безусловный переход к метку #1\ninc #1 — увеличить #1 на единицу\nmod #1, #2 — деление модулю #1 на #2\nadd #1, #2 — добавить #2 к #1\nmul #1, #2 — умножить #1 на #2\nshr #1, #2 — логический сдвиг вправо #1 на #2\nprint #1 — вывести значение #1 в консоль\n\nЗдесь F1 и F2 два регистровых флага, о которых поговорим позднее.\nТеперь давайте определимся с работой нашего интерпретатора, то есть с шагами которые он должен выполнить:\n\nЗагрузить файл исходного кода\nРазобрать каждую строку на инструкцию\nВыполнить код\n\nДавайте для начала определим сущность виртуальной машины\n\nУ нас будет:\n\nуказатель на выполняемую инструкцию ip, так называемый Instruction Pointer\nвосемь 64-х байтовых регистра reg, так как много нам их и не надо\nвектор с опкодами приложения app, то есть наша программа\nхэшмап с метками label для реализации произвольного перехода к командам программы\nи два флага, так называемый Регистр Флагов, но в упрощенном виде\n\nДля упрощения написания программы регистр флагов у нас представляется только двумя значениями, хотя всегда можно реализовать весь их набор.\nУстановку флагов F1 и F2 будем делать вот таким образом — при сравнении двух значений с помощью опкода cmp:\n\nесли #1 больше #2, то F1 = 1, иначе F1 = 0\nесли #1 равен #2, то F2 = 1, иначе F2 = 0\n\nздесь #1 — первый операнд, #2 — второй операд.\nТеперь можно определить перечисление с нашим набором команд\n\nТеперь остаётся только описать скелет программы\n\nОстаётся только реализовать два недостающих блока по парсингу и интерпретации кода.\nНачнём с самой простой функции, а именно interp.\nТут всё просто вытаскиваем инструкцию по ip из app и выполняем её, попутно увеличивая значение ip.\nПосле того как значение ip будет больше чем количества инструкций в app можно закончить выполнение.\nВ коде это выглядит вот так:\n\nА теперь к коду инструкций, которые очень просты в реализации\n\nОстаётся парсинг кода, который я разбил на несколько шагов:\n\nчтение всего файла\nпарсинг меток для реализации переходов\nпарсинг основного кода\n\nЧтение файла и разбор на отдельные блоки реализуется в пару строк\n\nДалее проходимся по списку инструкций и вычленяем из него метки\n\nОсталось только преобразовать строковое представление инструкции в Opcode, но перед этим нужно определить пару вспомогательных функций\n\nНу и собственно парсинг инструкций\n\nВот и всё, наш интерпретатор готов, теперь можно перейти к тестам!\nТесты\nНа моей машине с процессором i5-8265U примеры выполняются за следующее время:\n\nrust: 176ms\npython: 9.83s\nvm_asm: 2.80s\n\nВ идеале нужно было произвести как минимум запусков по 10 для каждого примера и взять среднее, но это же не исследовательская работа!\nМы здесь чисто по фану собрались, а те кто хочет всегда смогут сами его провести.\nЗаключение\nВот так просто и незатейливо можно написать самую простой регистровый интерпретатор кода.\nВесь исходный код доступен по ссылке\nНа этом сегодня всё, увидимся ещё через пару лет!\nПолезные ссылки\n\nПишем собственную виртуальную машину\nИнтерпретаторы байт-кодов своими руками\nСтековые и регистровые машины\nГипотеза Коллатца\nРегистр флагов\n\n","id":"https://freecx.github.io/2019-08-29-simple-register-vm/","title":"Пишем регистровую машину"},"https://freecx.github.io/2020-02-22-biguint-fib/":{"body":"Никто не ждал, а я вернулся!\nНаверное уж подумали что только через пару лет что-нибудь напишу, но я же не этот товарищ.\nНе будем тянуть кота за хвост и начнём!\nПостановка задачи\nЗадача проста как '2' + 2 = 22. Нужно всего-то посчитать 100_000 число последовательности Фибоначчи, делов-то!\nЕсли кто-то забыл, то вот основная формула для расчёта\n\nМы как всегда будем хитрить и писать с некоторыми оптимизациями.\n\nНо начнём сначала с написания функционала для расчёта больших чисел. Как-никак это самое главное!\nПисать как всегда будем на rust, т.к. я давно что-то его не использовал, да и нравиться мне этот язык!\nРеализация больших чисел\nДавайте сначала подумаем как мы будем представлять числа в памяти... Подумали? Молодцы!\nДля простоты реализации числа будем укладывать в вектор в обратном порядке. Далее вы поймёте почему именно в обратном.\nТ.е. число 852_493_284_923_849_834_982 в векторе будет выглядеть как-то так:\n\nДля этого нам нужна некоторая структура + реализуем макрос с помощью которого будет легко задавать числа.\n\nВы наверное заметили BigUInt::from_vec, которая у нас не определена. Давайте исправим эту оплошность!\n\nТеперь перейдём к самому интересному и напишем реализацию оператора сложения.\nВсё достаточно просто реализуется в два шага:\n\nвыравнить два числа, чтобы количество элементов было одинаково\nпройтись по всем элементам и сложить с учётом переноса\n\nСначала напишем функцию для выравнивания наших больших чисел.\n\nНе забываем что этот метод находится в блоке impl BigUInt.\nТеперь перейдём к оператору сложения\n\nЯ знаю что это не лучший вариант, но он прост в реализации и понятен.\nВроде всё готово! Так давайте сложим два больших числа!\n\nА теперь скомпилируем и запустим\n\nОй-ёй, кто-то забыл реализовать трейт Display для нашего типа.\n\nНу, а теперь соберём и проверим с помощью python\n\nВроде всё хорошо. Давайте перейдём к основной задаче.\nФункция расчёт чисел Фибоначчи\nНапишем наивную реализацию, а потом сделаем небольшие улучшения.\n\nВ наивной реализации сразу бросается в глаза множество .clone(), что не есть хорошо.\nТакже когда мы создаём f0 и f1, то мы делаем несколько ненужных операций .reverse(), что для 0 и 1 вообще не нужно.\nТак давайте оптимизировать!\n\nУже лучше! На этом наша реализация готова, но давайте используем сторонний крейт, где работа с большими числами сделана более оптимально.\nИспользуем сторонний крейт\nНе будем заострять внимание на отдельных частях, а сразу \"нырнём\" в код, который представлен в документации крейта num-bigint\n\nНе забудь добавить зависимости в Cargo.toml\n\nВот и всё, теперь можно перейти к тестам!\nТесты\nВсе приложения были собраны с флагом -C opt-level=3, что соответствует 3-му уровню оптимизации кода.\nНа моей машине с процессором i5-8265U приложения выполняются за следующее время:\n\nнеоптимальная реализация: 4.155387149s\nреализация с небольшой оптимизацией: 3.987596324s\nоптимизация inplace: 2.180896853s (см. файл my_biguint_inplace.rs)\nреализация через крейт num-bigint: 176.255462ms\n\nИнформация для тех, кто захочет повторить:\n\nstable-x86_64-unknown-linux-gnu\nrustc 1.41.0 (5e1a79984 2020-01-27)\ncargo 1.41.0 (626f0f40e 2019-12-03)\nautocfg 1.0.0\nnum-bigint 0.2.6\nnum-integer 0.1.42\nnum-traits 0.2.11\n\nДля более точного замера предлагаю сделать не менее 10 тестов и посчитать всякие умные метрики.\nМы же ограничились выбором минимального времени из 10 тестов для каждого из примеров.\nВыводы думаю сделаете сами.\nЗаключение\nВот так просто и незатейливо... А, это уже я писал. Короче вроде ничего сложного, а у нас уже есть простая реализация больших чисел.\nВесь исходный код доступен по ссылке.\nЕсли мне будет скучно, то я добавлю реализацию ещё на паре языков или оптимизирую текущий код.\nНа этом сегодня всё! Не страдайте фигнёй и надеюсь скоро увидимся... услышимся... учитаемся... Короче пока!\nПолезные ссылки\nСегодня их не будет, т.к. я ничего не читал для реализации, а хотя...\n\nnum-bigint\n\n","id":"https://freecx.github.io/2020-02-22-biguint-fib/","title":"Считаем числа Фибоначчи с помощью больших чисел"},"https://freecx.github.io/2020-02-26-cellular-automaton/":{"body":"Всем привет.\nПохоже что я слишком рано занялся работами для следующей статьи, но ничего.\nСегодня будет не очень большая статья.\nБыстро и просто реализуем клеточный автомат.\nВ этот раз будем писать на питоне, чтобы уложиться менее чем в 100 строк.\nНу что, погнали!\nПостановка задачи\nИдея довольно проста... как и все остальные задачи что я рассматривал :)\nЕсть некая регулярная решётка ячеек. Каждая ячейка может находиться в одном из конечного множества состояний.\nВ нашем случае упростим до активной (1) и неактивной (0). Мы задаём начальное состояние данной регулярной решётки и на каждой итерации пересчитываем состояние всех ячеек по некоторому выбранному нами правилу.\nЭто очень поверхностное описание задачи. Для подробностей обратитесь к спец. литературе или к Стивену Вольфраму.\nНавесим на нашу задачу несколько ограничений и требований:\n\nразмер сетки: 100x100\nколичество итерации: 100\nглавная и побочная диагональ являются активными\nа также активны следующие точки: (50, 0), (0, 50), (99, 50), (50, 99)\nсостояние текущей ячейки (cell[x, y]) будем считать вот так:\n\n\nНу что, приступим!\nРеализация\nДля нашей задачи достаточно одной сущности, которая будет реализовывать всё что нам нужно — доска.\nДавайте определим её, а также необходимые методы:\n\nДавайте пока повременим с реализацией данного класса и напишем код правила расчёта ячейки.\n\nА теперь напишем базовый код, который будет выводить каждое из состояние на печать\n\nОбвязочный код готов, а теперь можно приступить к реализации методов класса Board.\nПойдём по порядку.\n\nЗаключение\nА на этом сегодня всё. Исходники на нескольких языках забирать здесь.\nЕсли у меня в ближайшее время не появиться новая интересная задачка, то увидимся ещё не скоро :)\nПолезные ссылки\n\nКлеточный автомат\nПравило 30\nЭволюционирующие клеточные автоматы\n\n","id":"https://freecx.github.io/2020-02-26-cellular-automaton/","title":"Реализуем клеточный автомат"},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"body":"Совсем недавно просматривая старые фотки наткнулся на две интересные.\nЧуть позже появилась у меня идея сделать из них что-то типа параллакс эффекта, или как он там называется? Решил делать сам, т.к. просто было лень гуглить софт или видео о том как этот эффект делается.\nЗа основу взял простую идею — прозрачность первой фотографии плавно уменьшается от 100% и до 0%, а у второй наоборот, от 0% до 100%.\nПоковырял немного фотошоп, но результат меня не устроил. Яркостная составляющая итогового результата в каждом кадре была разной. Значит переходим к кодингу!\nИдея\nОт идеи плавного варьирования прозрачности не будем отказываться, но возьмём за основу вот такую формулу:\n\nФормула для преобразования есть, остаётся только написать код который смешивает фотографии в нужных пропорциях.\nДалее можно полученный набор изображений с помощью ffmpeg перегнать в видео.\n1-ый блин, python\nСразу скажу что код не совсем тот, что был у первой реализации, но по скорости он был всё равно отстойный!\nДля начала создадим класс ffmpeg, который будет ответственен за работу с ним\n\nИ остальной код\n\nВ результате скорость обработки кадров оказался ниже плинтуса (~0.5 fps), да и pipe часто обрывался.\n2-ый блин, оптимизация\nНа втором этапе решил упростить задачу для ffmpeg и передавать не png картинки, а сразу сырые данные в формате rgb24.\nНачнём как всегда с ffmpeg\n\nЗагрузка изображений тоже преобразилась\n\nФункция alpha_range вообще не изменилась, а вот blend стала интереснее\n\nИ код запуска изменился самую малость\n\nВ этой версии сразу видно сильный прирост по скорости работы.\n3-ая блин, rust\nРеализовав рабочий прототип на python я решил всё это дело переписать на rust.\nПоискав библиотеки для работы с изображениям наткнулся на lodepng у которой минимальное количество зависимостей, да и API простое.\nПерейдём же к коду.\n\nТеперь стоит определиться с функциями структуры Render, а именно нужны:\n\nзагрузка изображений\nдобавление переходов\nзадание выходного файла\nзапуск рендеринга\nсмешивание фотографий\n\n\nСразу отмечу, что функции 1-3 сделаны специально в стиле паттерна строитель.\nФункция 4 будет поглощать наш объект, чтобы после рендеринга уже нельзя было ничего сделать.\nИ ещё, все функции, кроме 5-ой, доступны для внешнего использования.\nСтоит упомянуть сразу вспомогательную функцию, которая нам поможет в загрузке изображений в rgb24.\n\nБазовые приготовления окончены, можно переходить к реализации функций Render.\nНачнём с простого, с пунктов 1 и 3:\n\nГенерацию перехода (значений альфа) сделаем с возможностью увеличения и уменьшения в зависимости от знака step.\n\nРеализация простая - сначала проверяем, что мы сможем за конечное число шагом завершить построение,\nа потом рассчитываем количество шагов которое нужно сделать и добавляем эти значения в массив transition.\nКод даже можно оптимизировать перенеся добавление новых значений под условие if.\nПойдём далее, к коду смешивания\n\nОсталось самое тривиальное - создать пайп между программой и ffmpeg для передачи данных\n\nИ заканчивая напишем main\n\nЗаключение\nВ результате получаем следующее (нажми play через меню, если видео не работает).\n\n\n\nНа сегодня всё. Исходники можно найти по следующей ссылке.\nВсем пока!\nЧто почитать\n\nAlpha compositing\nДоки по ffmpeg\nКак быть крутым программистом\n\n","id":"https://freecx.github.io/2020-07-23-2-5d-effect/","title":"Сказ о 2.5D эффекте"},"https://freecx.github.io/2020-09-04-simple-git-server/":{"body":"\n[Тук тук] Мы свидетели линуксовы, не хотели бы вы поговорить про git?\n\nКороче, сегодня мы из ***** и палок будем запускать гитовый сервер.\nПриступим же к действию!\nСначала нам нужно создать bare версию репозитория, который будем хостить. Предлагаю склонировать какой-нибудь репозиторий с github.\n\nТеперь нужно выполнить команду, которая создаст файл refs в папке info, для того чтобы гит знал что доступно\n\nИ, кстати, при каждом изменений в репозитории эту команду придётся вызывать заново.\nИли можно активировать post-update хук.\nОстаётся самая малость, запустить сервер который будет хостить файлы.\nДля простоты предлагаю запустить питоновский модуль http сервера.\n\nИ теперь в другом окне терминала можно выполнить\n\nВсё, ПРОФИТ!\nЧто почитать\n\nPro Git (v2)\n\n","id":"https://freecx.github.io/2020-09-04-simple-git-server/","title":"Запускаем свой git сервер"},"https://freecx.github.io/2020-09-05-fake-git-server/":{"body":"Давайте сегодня сделаем кое-что интересно, а именно фейковый git репозиторий на python.\nСначала нужно разобрать немного теории, чтобы понять как работает git, хоть и в упрощенном виде.\nНа истину в последней инстанции не претендую. Лучше обратитесь к правильному описанию работы в книжке Pro Git или исходниках.\nПогнали!\nНачинаем ковырять работу git\nЕсли вы читали мою прошлую статью и проверяли работу, то могли увидеть какие запросы делает git, чтобы получить репозиторий.\nНо если не читали или не делали, то вот вам оно\n\nДавайте же рассмотрим всё по порядку что здесь и как.\n\nЗдесь git запрашивает инфу по репозиторию, а именно коммиты указывающие на ветки в репозитории.\nВ данном же примере этот файл содержит следующее:\n\nДалее git хочет узнать какая ветка является главной и делает запрос к HEAD\n\nФайл HEAD же содержит только ссылку на master ветку\n\nДальше git начинает выкачивать объекты по хешам. Здесь можно заметить что таких объектов нет, т.к. у всех 404 ошибка.\nСкорее всего из-за того что это bare репозиторий.\nМожем немного схитрить и положить эти объекты в bare репозиторий, взяв их из основного. Просто скопируйте все папки (кроме info и pack) из репозитория в bare и обращение с клонированием репозитория сразу измениться.\n\nНо git всё равно обращается к объектам в директории pack, т.к. похоже не все объекты лежат так просто.\nДля нашей реализации должно хватить эмуляции объектов по хешам.\nТеперь с тем куда обращается git должно быть более-менее понятно, но встаёт вопрос: а что находиться в файлах с длинными именами (хэшами)?\nНу, вот например файл /tini.git/objects/e2/9a0f6430889930005e6d3494e905aee019d4b5\n\nПросто какие-то бинарные данные могли вы подумать и всгрустнуть.\nНо не всё так плохо, данные просто пожаты.\nДавайте же используем магию питона и получим реальную информацию!\n\nИ получаем следующее\n\nЭто уже интереснее, давайте я переформатирую вывод и расскажу что здесь что\n\n\nговорит нам что это объект типа commit с длинной сообщения в 257 символов (2-6)\nуказывает на коммит с деревом объектов репозитория\nссылка на родительский коммит (можно проигнорировать, если это первый коммит)\nавто коммита и время коммита в timestamp формате + временная зона\nтот, кто залил этот коммит + также время\nсообщение коммита\n\nДавайте теперь тогда перейдём к объекту ddec125ea25e4c9a556efd229d8efcaca8acd951 и посмотрим что там (я сразу отформатирую вывод)\n\n\nобъект типа tree с данными на 286 символов\nсначала права на файл, потом имя файла, а потом какие-то бинарные данные\nаналогично, но это похоже на папку\n\nВстаёт вопрос, что за бинарные данные. Давайте представим в более читаемом виде (hex)\n\nО, а это уже похоже на хэш (коммит). Значит можно поискать этот файл в папке с объектами и посмотреть что там внутри.\nНо быстро обламываемся, т.к. в репозитории нет такого файла ~/tini.git/objects/a9/d37c560c6ab8d4afbf47eda643e8c42e857716.\nНе беда, давайте возьмём другой файл, например .travis.yml и попытаем счастье с ним.\n\nПолучаем новый тип данных - blob.\nНа этом моменте можно остановиться, т.к. для нашей задачи хватит этих объектов.\nНо стоит обсудить ещё одну вешь - откуда берётся хэш объекта?\nВсё просто - это sha1 от данных!\nПилим фейк\nДля реализации веб-сервера я будет достаточно Flask и пары стандартных библиотек.\nПредставлю сразу код с комментариями.\n\nИ этого хватит чтобы обдурить git.\nСсылка на исходник в gist\nРезультат\nТеперь только остаётся только запустить наш фейковый сервер и успешно склонировать репозиторий\n\nЧто почитать\n\nЯ ничего не использовал, так что не будет ссылок\nИди нормальные книжки лучше почитай!\n\n","id":"https://freecx.github.io/2020-09-05-fake-git-server/","title":"Имитируем git репозиторий"},"https://freecx.github.io/2020-09-25-l-systems/":{"body":"Всем привет.\nДолго откладывал написание этой статьи, но наконец нашёл в себе силы и дописал её!\nСегодня хотел бы показать интересную вещь как L-система или система Линденмайера.\nКраткая справка из вики, для общего развития:\n\nL-система или система Линденмайера — это параллельная система переписывания и вид формальной грамматики.\nL-система состоит из алфавита символов, которые могут быть использованы для создания строк, набора порождающих правил, которые задают правила подстановки вместо каждого символа, начальной строки («аксиомы»), с которой начинается построение, и механизма перевода образованной строки в геометрические структуры.\n\nЧтобы заинтересовать давайте сразу глянем на результат того, что в итоге получиться:\n\n\n\nЗадача\nЕсть некоторая аксиома и N порождающих правил. Применяя каждое из правил к аксиоме мы получаем следующую итерацию значения системы. Для лучшего объяснения лучше почитайте вики или книжку.\nНам надо же произвести итерацию алгоритма и отрисовать текущее состояние системы, а потом повторить ещё N число раз.\nДавайте рассмотрим на примере как происходит генерация для следующей системы:\n\n\nA\nAB\nABA\nABAAB\n\nНа нулевом шаге у нас по сути ничего нет и мы просто подставляем значение аксиомы.\nНа первом шаге преобразуем A в AB по правилу A.\nНа втором шаге А преобразуется в AB, а B преобразуется в A.\nИ на третьем шаге первая и последняя A в AB, а В, та что в середине в A. И в результате получаем ABAAB.\nНадеюсь на данном этапе уже понятен смысл преобразований.\nОстаётся только назначить каждому правилу некоторую команду. Допустим A -&gt; x + 1, а B -&gt; y + 1.\nОбновим систему правил:\n\nИсполнив полученный результат по определенным командам мы получаем интересное поведение системы.\nДля ABAAB, если принять начальное положение (x, y) за (0, 0) получаем: (3, 2).\n\nA: (1, 0)\nB: (1, 1)\nA: (2, 1)\nA: (3, 1)\nB: (3, 2)\n\nВообще дополнительные правила можно придумать любые, но у нас будет в основном перемещение с отрисовкой.\nРеализация\nСразу представлю вспомогательный код с краткими комментариями, а потом перейдём к основному коду.\n\nТеперь перейдём к функциям рендеринга изображений\n\nА теперь перейдём к самым интересным функциям:\n\nВот и всё, всё готово!\nРендер\nВ начале статьи был представлен рендер Треугольника Серпинского, который можно записать в нотации L-системы следующим образом:\n\nИли сериализованный в json, для нашей программы:\n\nСохранив файл и скормив его программе получаем тот же результат, что и в начале статьи.\nЗаключение\nХотел бы выразить особую признательность и поблагодарить мою лень за то что успела выйти статья на хабре, прежде чем я продолжил дописывать эту статью!\nИсходники, и некоторые виды описанных систем, как всегда можно забрать по ссылочке. Модели запихнул в один файл, где ключ - имя файла, а значение - содержимое модели.\nА на этом пока всё, всем пока!\nЧто почитать\n\nКроновер Р., Фракталы и хаос в динамических системах. Основы теории, 2000\nL-systems\nФракталы на Python. Пошаговое руководство\n\n","id":"https://freecx.github.io/2020-09-25-l-systems/","title":"Кратко о L-системах"},"https://freecx.github.io/2021-01-11-qr-video/":{"body":"Всем привет.\nЭту небольшую заметку меня всподвигнул написать вот этот сайт и @okdoc.\nЕсли кратко, то можно запихнуть в qr код любую картинку.\nЯ же решил пойти дальше и сделать qr видео.\nОб этом и будет мой рассказ.\nИдея\nИдея довольно проста:\n\nПолучаем кадр из видео.\nРежем под нужный размер.\nИспользуем эффект дизеринга, чтобы получить двухцветную картинку.\nГенерируем из картинки QR код.\nПередаём QR код в рендер.\nПереходим к 1, если есть ещё кадры.\n\nПилим\nСначала я решил написать рендер и нарезжщик видео на картинки.\nЕсли рендер я уже ранее реализовывал, то с нарезщиком нужно было делать.\nДавайте сразу к коду\n\nТеперь можно взять и подготовить готовую библиотеку и файлы qrmap.py и tables.py.\nСобираем всё в папку и пишем главный файл\n\nЗаключение\nРезультат работы (с добавленной звуковой дорожкой) можно посмотреть здесь, а архив со всем проектом доступен здесь.\nА на этом пока всё, всем пока!\nЧто почитать\n\nНа чём основана работа\n\n","id":"https://freecx.github.io/2021-01-11-qr-video/","title":"Сказ о том как я из QRов видео собирал"},"https://freecx.github.io/2021-01-13-password-box/":{"body":"Всем привет.\nСегодня я немного расскажу про интересный способ хранения паролей.\nСразу внесу ясность:\n\nя не специалист и этот метод скорее всего не очень хорош по сравнению с KeePass или аналогичными программам\n\nТак что это просто proof of concept, я вас предупредил!\nПогнали!\nИдея\nИдея метода хранения паролей мне пришла довольно недавно и составит в следующем:\n\nа что если сгенерировать некий файл со псевдослучайными символами в нём, а потом по некоторому алгоритму заменить символы на парольные\n\nСразу возникают вопросы:\n\nКакой алфавит выбрать для создания файла?\nКаким методом заполнять файл чтобы данные были в нём довольно случайными?\nПо какому алгоритму записывать пароль в этот файл, чтобы не в открытую он там был?\n\nПо первому пункту можно сразу легко всё решить - для большей стойкости используй весь диапазон [0, 255], но я для упрощения возьму только печатные символы.\nПо второму пункту не будем сильно мучиться и используем стандартную библиотеку secrets, а конкретнее нам понадобится функция choice.\nНа третьем пункте остановимся по подробнее.\nТретий пункт\nУ нас есть некоторый файл с ограниченной длиной и нам нужно в нём спрятать пароль.\nКак же это сделать, чтобы пароль не лежал в открытую?\nСамое простое решение - записать в случайные места в файле!\nНо чтобы считать этот пароль обратно нам нужно как-то повторить это действие в обратную и получить эти символы!\nНа помощь нам приходит такая классная штука как seed.\nИз-за того что истинно случайные числа не так просто получить, то были придуманы алгоритмы которые дают последовательно псевдослучайных числе с большим периодом после которого эта последовательность начинает повторяться. В нашем случае пароли будут не очень большими и поэтому можно вообще забыть про эту особенность.\nА при чём тут seed тогда?\nДля того чтобы последовательность была каждый раз разная и задают seed, т.е. отправное значение в алгоритме генерации.\nРаньше часто использовали текущее время в системе, чтобы задать значение seed, но сейчас лучше вообще использовать более криптостойкие методы, т.к. стандартный random почти в любом языке годен только для простых вещей.\nНо нам для реализации вполне хватит стандартной библиотеки random.\nРеализация\nСразу в код без лишней болтовни\n\nЗаключение\nКак вы могли понять из кода - важно помнить seed который вы используете для восстановления пароля.\nИсходники утилиты можно найти по ссылке.\nА на этом сегодня всё, всем пока!\nЧто почитать\n\nЯ ничего не использовал, так что не будет ссылок\n\n","id":"https://freecx.github.io/2021-01-13-password-box/","title":"Коробка для паролей"},"https://freecx.github.io/2021-02-20-data-coding/":{"body":"Всем привет.\nСегодня я хочу немного рассказать про человекочитаемое кодирование данных.\nЭто не полноценная статья, да и метод не тянет на новый или выдающийся, но он довольно прост в реализации.\nИдея\nАлгоритм кодирования данных можно описать в три пункта:\n\nПроход по всем входным данных и преобразование каждого символа в 8 бит данных\nДобавление паддинга в конец данных\nПроход по всем данным и выбор по 6 бит с преобразованием по алфавиту\n\nВсё выглядит очень просто, что так и есть!\nС декодированием обстоит всё так же просто. Оно реализуется обращением шагов 1-3:\n\nПроход по всем данным и преобразование символа в 6 бит данных\nУдаление паддинга\nПроход по всем данным и выбор по 8 бит с преобразованием по алфавиту\n\nНичего же сложного?\nАлфавит\nГлавное требование к алфавиту — фиксированная длина в 2^N символов, где N равен 6.\nВ реализации сохранения состояния игры я использовал следующий алфавит:\n\nНо в данном примере мы его изменим на вот такой:\n\nВ своей же реализации можете выбрать любой какой вам больше нравится.\nРеализация\nДавайте в этот раз реализуем алгоритм на менее привычном языке, например на Haskell.\nЯ не мастер писать на нём, так что сильно не пинайте!\nОпределим скелет нашей программы\n\nТут мы просто организуем чтение строки из stdin и вызов функций кодирования и декодирования.\nДля реализации основного функционала нам нужны некоторые вспомогательные функции, такие как:\n\nдобавление паддинга\nудаление паддинга\nгруппировка элементов\nчисло в массив бит\nмассив бит в число\n\nДавайте определим их\n\nТеперь можно перейти к самому главному\n\nКак это работает?\nДля тех кто не знаком с Haskell это наверное выглядит очень странно.\nПоэтому давайте рассмотрим последовательно что делает функция encode на примере строки из одного символа \"h\".\n\nasArray8 (toIntMap проходит по всей строке и собирает все эти биты в один массив)\n\n\n\nmodTail6 (добиваем паддингом для кратности 6)\n\n\n\ngroup 6 (группируем по 6)\n\n\n\nasAlphabet (преобразуем в символы)\n\n\nТак как String это синоним [Char], то на выходе мы автоматически получим строку \"q0\".\nВозможны сейчас стало понятно почему я цифры в алфавите поставил в самое начало :)\nЗаключение\nПолный исходный код данной программы можно забрать здесь.\nДанный метод я использовал в rs-1010 для сохранения состояния игры.\nДанную реализацию ещё можно сильно улучшить убрав создание массива из битов, но это уже будет по сути реализация\nалгоритма base64 просто с модифицированным алфавитом.\nНа это закончим на сегодня.\nЧто почитать\n\nbase64\nКак работает алгоритм генерации паролей Castlevania III\nГенерирование паролей для Super Castlevania IV и Rock n' Roll Racing\n\n","id":"https://freecx.github.io/2021-02-20-data-coding/","title":"Немного про кодирование данных"},"https://freecx.github.io/2021-04-14-find-a-cat/":{"body":"Всем привет!\nСегодня будет довольно странный пост — мы будем искать слово 'cat'.\nУстраивайтесь поудобнее и погнали!\nЧто за?\nНедавно мне пришла очень странная идея — найти в последовательности псевдослучайных чисел некое заданное слово.\nСначала я думал найти что-то типа 'hello world', но сразу отказался от него, т.к. чем длиннее фраза, тем меньше вероятность найти её.\nИ решил остановится на более коротком — 'cat'.\nЗадачи\nДавайте сформулируем задачу:\n\nнайти такой seed, который будет давать слово 'cat' после последовательного применения функции rand, т.е.\n\n\nЧтобы не было скучно решать только одну задача мне ещё подкинули найти кота в sha256 (хотя можно взять и любую другую хеш функцию).\nСформулируем и для неё задачу:\n\nнайти такую строку, после применения к которой операции хеширования можно найти в полученном хеше слово 'cat'\n\nКот в случайных числах\nВ данном примере будем использовать xor shift для генерации псевдослучайных чисел\n\nВ качестве основного триплета я взял самый часто используемый: [13, 17, 5].\nС ним точно будем уверены что период генерации будет 2 ^ 32 - 1, т.е. самый худший случай для перебора составит 4_294_967_295 итераций.\nЕсли хотите подробнее погрузиться в теорию, то читайте вики и статью Xorshift RNGs.\nУтилита для проверки\nДля начала нам нужна утилита, с помощью которой сможем проверить любой заданный начальный seed.\n\nНаивный алгоритм\nСуть наивного алгоритма — простой перебор.\nТо есть берём какое-то начальное число seed и начинаем искать последовательность чисел, которые по модулю 255 будут давать слово 'cat'.\nВ коде его можно представить как-то так:\n\nКод написан не идеально, но в данном случае этого достаточно чтобы довольно быстро найти значение 357063244 пройдя 69_990_600 итераций, что довольно неплохо!\nС помощью ранее представленной программы можем проверить его:\n\nНо будет не интересно останавливаться на таком простом переборе и поэтому давайте улучшим наш алгоритм!\nУлучшенный алгоритм\nСуть в том чтобы вместо обычного перебора брать и находить такие числа N удовлетворяющие условию N % 255 = K, где K — первая буква слова 'cat'.\nТо есть нам нужно найти seed, N1, N2 и N3 по ранее поставленным условиям:\n\nДля нахождения N1 мы можем воспользоваться формулой из статьи на вики.\nПодставляя все значения в формулу и заменяя a на N1 и q на i получим:\n\nНа данном этапе мы может определить N1, N2 и N3 просто перебирая все возможные N1 и проверяя на наше условие, но остаётся ещё число seed.\nПришлось покапаться в интернете для поиска того, что может помощь найти значение seed из N1. Я наткнулся на интересную статью в которой хоть и описывается обращение алгоритма XorShift128+, но самой идеи будет достаточно чтобы реализовать аналогичное решения для нашего 32-битного варианта.\nВсё что нужно нам сделать — обратить все операции алгоритма и для этого разобьём задачу на три маленьких подзадачи, где мы будем обращать одну операцию за раз, а потом объединим результаты каждого из шагов, но только в обратном порядке.\nДля обращения seed ^= seed &lt;&lt; 13 можно сразу восстановить большую часть изначального значения, а затем сделать сдвиг и восстановить всё значение\n\nДля seed ^= seed &gt;&gt; 17 решение вообще элементарное\n\nА вот для seed ^= seed &lt;&lt; 5 нужно немного потрудиться, т.к. от оригинального значения осталось совсем мало\n\nЕсли не понятно как это всё работает, то стоит почитать про операции исключающее или и логический сдвиг.\nНу, а теперь остаётся только всё это закодить\n\nВ результате программа быстро (за 1315 шагов) находит первый seed, который ведёт к 'cat': 4140321215.\n\nКот в хешах\nС xor shift закончим. Теперь перейдём на поиск кота в хеше.\nСразу встаёт вопрос: как будем представлять значение хеша в виде текста?\nМне сразу напросилось простое решение:\n\nинтерпретируем каждые 2 символа как шестнадцатеричное значение\nбудем выводить только символы из диапазона [a-zA-Z], а остальные заменять на '-'\n\nТо есть хеш\n\nпреобразуется в\n\nгде '-' — символы вне диапазона.\nНаивный алгоритм\nВ качестве наивного алгоритма сделаем следующее: сгенерируем некоторые случайное число с помощью random, потом преобразуем его в строку и посчитаем хеш.\nОстаётся только преобразовать полученный хеш в читаемую строку и проверить если ли подстрока 'cat' в данной строке.\nЗамечу два момента:\n\nв качестве входной строки для хеш алгоритма был взят первый придуманный мной вариант, но вы можете взять что вашей душе угодно\nв данной реализации не будем считать количество проделанных итераций, т.к. мы используем функцию random\n\nК коллайдеру! То есть к коду!\n\nНе забываем про утилиту для проверки хешей в ручном режиме:\n\nС помощью данного наивного подхода был найден вот такой вариант\n\nна основе вот этой строки\n\nсами можете убедиться с помощью sha256sum\n\nа вот так выглядит преобразованный хеш в виде строки\n\nЗаключение\nЯ бы сказал \"Не будем останавливаться на достигнутом — реализуем более быстрый алгоритм\", но у меня пока нет идей для него! Как только я его придумаю, то напишу отдельный пост.\nВесь написанный мной код можно взять по ссылке.\nВсем пока!\nЧто почитать\n\nSHA-2\nXorshift\nXorshift RNGs\nДеление с остатком\nXorShift128+ Backward\nИсключающее «или»\nЛогический сдвиг\n\n","id":"https://freecx.github.io/2021-04-14-find-a-cat/","title":"Найди кота"},"https://freecx.github.io/2021-12-29-bf-interp/":{"body":"Всем привет!\nЯ планировал написать одну большую статью про изотерический язык программирования Brainfuck, но как всегда что-то пошло\nне так и я не успел дописать код. Так что я решил разбить статью на две и первую выпустить под конец 2021.\nДавайте же начнём!\nВведение\nПрежде чем начать нам нужно немного узнать о языке Brainfuck. Информации из вики достаточно для понимания:\n\nBrainfuck — один из известнейших эзотерических языков программирования, придуман Урбаном Мюллером (нем. Urban Müller) в 1993 году, известен своим минимализмом. Название языка можно перевести на русский как вынос мозга, оно напрямую образовано от английского выражения brainfuck (brain — мозг, fuck — иметь половое сношение (оск.)), т. е. заниматься ерундой. Язык имеет восемь команд, каждая из которых записывается одним символом. Исходный код программы на Brainfuck представляет собой последовательность этих символов без какого-либо дополнительного синтаксиса.\n\nУ нас в распоряжении есть 8 команд (brainfuck с функциями не будем рассматривать), а именно:\n\n&gt; — перейти к следующей ячейке памяти\n&lt; — перейти к предыдущей ячейке памяти\n+ — увеличить значение текущей ячейки на единицу\n- — уменьшить значение текущей ячейки на единицу\n. — напечатать значение из текущей ячейки\n, — ввести значение (stdin) и положить в текущую ячейку\n[ — перейти к коду после ], если в текущей ячейке ноль\n] — вернуться к коду после ], если в текущей ячейке не ноль\n\nЭтих 8-ми команд хватит чтобы реализовать любую программу, т.к. язык полный по Тьюрингу, но наша задача\nзаключается не в написании, а в интерпретации кода на brainfuck.\nДавайте же перейдём к планированию нашего интерпретатора.\nСтруктура интерпретатора\nНе будем усложнять себе работу и реализуем самый простой интерпретатор.\nРабота выполним в два этапа:\n\nпарсинг (или разбор токенов) программы в удобный для нас вид\nвыполнение программы\n\nЭтап разбора токенов\nНа данном этапе мы должны входной поток токенов преобразовать в некий набор идентификаторов для нашей программы.\nПо сути это отображение одного множества на другое, но не будем усложнять статью :)\nСчитайте просто что мы символ заменяем на некоторую константу (хотя мы будем использовать перечисление).\nВроде всё просто, но тут есть две интересные команды, которые немного усложняют наш процесс разбора — [ и ].\nИз-за них этап разбора немного усложняется, так как нам нужно запомнить позиции этих токенов, чтобы на этапе интерпретации\nможно было легко реализовать переход. Чуть дальше вы поймете о чём я говорю.\nВсё конечно не очень так сложно. Просто нам нужно сохранить индекс токена в некий буфер, когда мы достигаем команды\n[, а на команде ] должны проставить индексы для [ и ] в подготовленной нами программе для интерпретатора.\nЭтап выполнения кода\nПосле того как этап разбора токенов закончен, то можно перейти к выполнению программы.\nДанный этап можно разбить на три шага:\n\nберём токен по текущему индексу (ip — instruction pointer)\nвыполняем его\nувеличиваем ip\n\nТолько нужно сделать небольшое уточнение — команды [ и ] могут менять ip.\nВроде это всё что нужно знать для того чтобы сделать свой интерпретатор brainfuck.\nРеализация\nПисать рабочий интерпретатор я буду на Rust, но так же приложу код на C++ в конце статьи.\nБазовый код\n\nПарсинг\nНачнём с преобразования токена в наш enum через реализацию трейта From:\n\nДальше реализуем парсинг токенов:\n\nИнтерпретация\nТеперь же перейдём к коду интерпретации:\n\nТест\nТеперь можно собрать приложение и проверить работу \"Hello World!\":\n\nБольше примеров для проверки можете найти в интернете или написать самим!\nЯ оставил пару примеров в репозитории, но для более удобной работы вам предстоит реализовать загрузку кода из файла.\nЗаключение\nВ следующей статье рассмотрим компиляцию brainfuck в исполняемое приложение!\nВесь написанный код можно взять в репозитории и там же можно найти C, C++, Go версии.\nВсем пока!\nЧто почитать\n\nBrainfuck\n\n","id":"https://freecx.github.io/2021-12-29-bf-interp/","title":"Интепретатор Brainfuck"},"https://freecx.github.io/2022-04-11-bf-llvm/":{"body":"Всем привет!\nА вот и вторая часть обещанной статьи.\nПриступим же!\nВведение\nДля начала давайте определимся с терминологией.\nНасчёт LLVM вики говорит нам следующее:\n\nLLVM — проект программной инфраструктуры для создания компиляторов и сопутствующих им утилит. Состоит из набора компиляторов из языков высокого уровня (так называемых «фронтендов»), системы оптимизации, интерпретации и компиляции в машинный код.\n\nВ данном случае мы не будем сильно закапываться в архитектуру LLVM и ограничимся только его IR (или Intermediate Representation aka промежуточное представление).\nБлаго если у вас в системе установлен llvm, то есть возможность использовать следующие утилиты:\n\nlli — интерпретатор байткода\nllc — и компилятор соответственно\n\nНам же будет достаточно только lli, но если захотите собрать приложение, то llc вам в помощь.\nНо прежде чем мы перейдём написанию своего мини фронтенда давайте сделаем более простую вещь — напишем транспайлер в си.\nТранспайлер\nТранспайлер или транслирующий компилятор довольно интересная вещь с точки зрения лени :)\nКогда лень писать свой фронтенд, то мы всегда можем использовать мощности другого языка.\nПросто реализуем перевод конструкций нашего языка в язык назначения (например C).\nБольшим плюсом мы можем получить возможности по оптимизации кода, но не всегда они могут быть успешными.\nХватит пустой болтовни... приступим к написанию кода.\nБазироваться он будем на коде из прошлой статьи\n\nЭтого небольшого кода нам хватит чтобы преобразовать любую программу на Brainfuck в программу на C.\nВнимательный читатель мог заметить include_str!(\"../templates/c-template.txt\") — данный макрос сильно упрощает нам жизнь, когда нужно вставить большой кусок текста и не очень хочется захламлять код.\nСодержимое файла c-template.txt — шаблонный код на языке C с возможностью подстановки нужных нам значений\n\nШаблон кода слишком простой чтобы его комментировать. Давайте сразу перейдём к результату транспиляции hello.bf из Brainfuck в C:\n\nКод конечно не самого лучшего качества, да и форматирование хромает, но зато это рабочая программа полученная из кода на Brainfuck, которая после запуска честно выводит на терминал\n\nЗдесь конечно ещё можно произвести всякие улучшения, как например объединение одинаковых инструкций идущих подряд, но мы на этом остановимся и перейдём к следующему этапу.\nLLVM IR\nЗдесь так же будем использовать такой же шаблон как и в прошлом разделе, но тут стоит немного более подробно рассмотреть как каждая инструкция на Brainfuck преобразуется в LLVM IR.\n\nIR в LLVM имеет довольно специфичные ограничения по сравнению с другими ассемблерами. Например нельзя увеличить значение ячейки памяти, не загрузив её в промежуточную переменную. Полные подробности можно найти по ссылке.\nНачнём же с инкремента ячейки памяти:\n\nТут стоит немного прояснить синтаксис.\nСимвол % перед значением указывает на локальную переменную.\nДля каждой новой команды (если она возвращает значение) нужно увеличивать индекс регистра. Да и количество регистров не ограничено.\nХотя мы всегда можем использовать именованные регистры, чтобы не мучиться с всё время увеличивающимся счётчиком регистров.\nДля реализации декремента всего-то нужно изменить\n\nУвеличение индекса mp реализуем вот так:\n\nТут уже можно видеть, как вместо %1 и т.д. используются именованные переменные, да и появились несколько новых команд.\nУменьшение индекса будет аналогичным, но только условие проверки сменится на\n\nи переход к метке с выводом ошибки будет другим.\nТеперь давайте рассмотрим команды вывода символа в терминал.\n\nА для чтения в память\n\nОстаётся только разобраться с циклом и тут самое интересное.\nПришлось схитрить, т.к. lli всё время не хотел нормально работать с метками.\nВсё оказалось из-за того, что нужно явно делать переходы на них с помощью br\n\nТут пришлось объединить код двух команд для того чтобы было полное понимание переходов между ними.\nВроде бы разобрали все команды и можно приступить к написанию кода.\n\nТут уже стоит рассмотреть подробнее шаблонный код программы\n\nШаблоны для каждой инструкции можно посмотреть в папке. Основное отличие от тех, что были описаны ранее — подстановка индексов для временных меток и регистров.\nТеперь мы так же можешь преобразовать hello.bf из Brainfuck, но уже в LLVM IR.\nПокажу только часть кода, т.к. он получился намного длиннее кода на C\n\nТеперь этот код можно запустить с помощью lli:\n\nЗаключение\nВесь код доступен в репозитории\nА на сегодня это всё.\nДо следующего раза!\nЧто почитать\n\nThe LLVM Compiler Infrastructure\nТранспайлер\n\n","id":"https://freecx.github.io/2022-04-11-bf-llvm/","title":"LLVM фронтенд для Brainfuck"},"https://freecx.github.io/2023-03-27-easy-gamedev/":{"body":"Всем привет.\nЯ, как обычно, успешно забил на написание статей для блога. Ещё бы чуть-чуть и статья бы вышла ровно через год от предыдущей.\nНо не будем впустую разглагольствовать и перейдём непосредственно к самой статье.\nВведение\nСегодня я хочу приоткрыть форточку в геймдев и сделаю это через реализацию простой демки на Godot.\nС каждым годом вкатиться в геймдев становиться всё проще и проще… нужно всего-то поступить на курс геймдев разра… блин, не тот текст. Но вообще вход в игровую разработку и правда стал довольно простым делом.\nЕсли вы думаете что в этой статье будет много картинок и я буду в интерфейсе перетаскивать ноды, то для вас у меня плохая новость — будем делать всё кодом!\nЯ бы не был бы собой, если начал пихать кучу картинок в статью о программировании, если это конечно не статья про генерацию картинок.\nПоэтому в статье будет не совсем классический подход к разработке на Godot, а точнее на gd.\nПогнали!\nИдея\nНадеюсь вы немного уже почитали про сам движок и заглянули в документацию к нему, но если нет, то можете посмотреть вот это видео. Больше информации о разработке на движке можете найти вот на этой странице.\nВообще я бы посоветовал почитать best practices, перед началом разработки своей игры, но в нашем случае мы обойдёмся только информацией по API движка.\nДемка у нас будет простая — соберём стену из кубиков и будем в неё стрелять другим кубиком.\nОбрисуем общий план, а потом пойдём писать код.\nПлан на демку у нас следующий:\n\nсоздать границы игрового мира\nрасставить кубы\nрасставить свет\nпоставить камеру\nдобавить интерактив\n...\nPROFIT?\n\nРеализация\nИтак проект создан и мы имеем базовую 3d сцену с головной нодой. Нужно только прикрепить скрипт к головной ноде и можно начинать.\nИ нас тут же встречает базовый код\n\nСначала опишем наше верхнеуровневое представление, а далее будем постепенно реализовывать недостающие куски кода.\n\nЦикл, в начале кода используется для очистки сцены от уже созданных нод.\nЧуть позже мы сможем его вызывать по нажатию клавиши и он будет использован для перезапуска демки.\nИдём далее и следующая из недостающие частей — пол\n\nЕсли на данном этапе попробовать запустить демку, то мы ничего не увидим, а всё из-за того что у нас отсутствует виртуальная камера.\nДобавим же её\n\nТеперь же можно даже запустить и посмотреть, что у нас получилось, если конечно не забыть закомментировать отсутствующие функции.\nКонечно на вид так себе, но уже что-то работающее.\nВнесём немного света в эту мрачную атмосферу добавив пару источников\n\nНе забудьте раскомментировать вызывающий код чтобы увидеть изменения.\nОстаётся определить функцию ответственную за создание стены из кубов и демка готова.\n\nПочти всё готово, осталось только добавить выстрел кубом в сгенерированную стену.\n\nВ принципе на этом можно было и закончить создание демки, так как по сути реализовали всё что задумывали, но мне кажется что как-то мало интерактива в нашей демке.\nДавайте же добавим управление камерой, чтобы можно было наблюдать физику кубов с почти любого ракурса.\nДля этого необходимо создать новый скрипт, я назвал его rotator, где определим вот это\n\nЭтот код отвечает за расположение камеры на заданном расстоянии от центра.\nТакже он задаёт угол поворота камеры, чтобы она всегда смотрела в центр сцены.\nТак сцена всегда будет попадать в объектив виртуальной камеры.\nТеперь же остаётся немного изменить код, связанный с камерой\n\nСтоит уточнить, что child объект всегда \"наследует\" от родителя положение в пространстве и поворот на угол, что очень удобно в нашем случае.\nЯ специально написало слово в скобках, так как у child объекта может быть своё положение/поворот, но в локальной системе координат, относительно родительского объекта.\nНе забываем добавить обработку новых действий\n\nПоследнее, чтобы я ещё добавил — экран подсказки со списком клавиш.\n\nВсё, демка готова!\nЗаключение\nПолный код доступен в репозитории.\nЕсли интересен более классический подход к разработке игры на Godot, то посмотрите на проект billiard-with-guns.\nХоть игра и собрана криво, но вполне себе рабочая.\nЛадно, до следующего раза.\nВсем пока!\nПолезные ссылки\n\nGodot\nGodot Docs\ngd\nFPS tutorial\nCreate Your First Complete 3D Game with Godot\nTutorials and resources\nBest practices\nClass reference\nProject source code\nBilliard With Guns\n\n","id":"https://freecx.github.io/2023-03-27-easy-gamedev/","title":"Геймдев? Легко!"},"https://freecx.github.io/2023-12-02-micro-http/":{"body":"Всем привет.\n“Недавно” мне пришла в голову довольная странная идея о реализации небольшого http сервера. Не знаю конечно зачем мне это было нужно, но разбираться в технологии, которые мы используем каждый день довольно интересно и познавательно.\nЕсли вам это не очень интересно, то всегда можете сразу перейти к коду.\nВообще эта статья должна была выйти давным-давно, но мне было лень её дописывать.\nВведение\nЯ бы предложил для начала посмотреть статью HTTP Server: Everything you need to know to Build a simple HTTP server from scratch, где неплохо описывается реализация с сервера нуля.\nНо вообще, если хотите разобраться в тонкостях работы, то стоит обратиться к вот этому списку RFC, которые описывают реализацию HTTP/1.1:\n\nRFC 7230\nRFC 7231\nRFC 7232\nRFC 7233\nRFC 7234\nRFC 7235\n\nВообще я не ставил себе цель в полной поддержке RFC, да и вообще пошёл ленивым путём — реализовал только то, что было нужно для работы демо сайта.\nЛадно, давайте уже закончим на этом введении и перейдём к написанию кода.\nHello world\nДля самой минимальной рабочей программы нужно несколько вещей:\n\nоткрыть порт и слушать его\nобработать входящий коннект\nсформировать ответ\n\nНабросаем базовую часть кода\n\nБазовый код накидали и теперь нужно написать обработчик handle_connection и наш Hello world готов!\nДля его реализации нам необходимо произвести несколько действий:\n\nсчитать заголовочную часть запроса\nраспарсить её\nдочитать контент\nи ответить по форме\n\nПервую часть для удобства вынесем в отдельную функцию.\n\nИ теперь осталось только реализовать handle_connection\n\nВсё, Hello world готов к запуску. Можете смело проверять работу в браузере!\nУвы, но обычным Hello world сейчас уже никого не удивишь. Поэтому мы пойдём чуть дальше и реализуем небольшой интерактивный сайт.\nИ начнём со фронтенда.\nФронтенд\nЯ не стал с ним сильно запариваться и сделал ультра бюджетную вёрстку. Особых подробностей тут от меня не ждите — всё-таки я не очень большой мастер фронта.\nТак что просто смотрите вёрстку/код\nsite/index.html\n\nsite/static/style.css\n\nsite/static/script.js\n\nКак вы уже наверное поняли я выбрал в качестве демки генератор псевдослучайных чисел с генерацией на бэке.\nНа этом с фронтовой частью закончили.\nТеперь переходим к мясу!\nБэкенд\nРеализованный Hello world конечно нам поможет, но тут стоит очень сильно переработать весь интерфейс.\nКод будем разделять на модули. Как и ранее пойдём от логики нашего приложения и постепенно будем заполнять пустоты.\nsrc/main.rs\n\nТеперь когда основа заложена, то стоит переходить к отдельным частям.\nДавайте сразу их и обозначим:\n\nРоутинг запросов\nМногопоточная реализация\nСериализация/десериализация json\nОбработка ошибок\nГенерация псевдослучайных чисел\n\nВообще для удобства сразу определим наши модули.\nsrc/lib.rs\n\nНу а теперь далее к реализации!\nsrc/error.rs\n\nsrc/status.rs\n\nsrc/http.rs\n\nsrc/app.rs\n\nВ идеале, в методе run, стоило бы реализовать work-stealing очередь, но для этого нужно использовать библиотеку crossbeam, или писать свою реализацию очереди.\nВ данной статье обойдёмся текущей кривой реализацией многопоточности.\nsrc/json.rs\n\nsrc/random.rs\n\nsrc/file.rs\n\nИ вот теперь можно запускать и наслаждаться нашим небольшим http сервером!\nНе забываем что он доступен на 127.0.0.1:8000.\nЗаключение\nТут должны быть какие-то выводы, но их не будет.\nВсем пока!\nПолезные ссылки\n\nMicroHttp\nHTTP Server: Everything you need to know to Build a simple HTTP server from scratch\nRFC 7230, 7231, 7232, 7233, 7234, 7235\ncrossbeam\nanyhow и thiserror\nXorshift\nXorshift RNGs\n\n","id":"https://freecx.github.io/2023-12-02-micro-http/","title":"А не написать ли мне сервер?"},"https://freecx.github.io/2024-04-01-unga-bunga/":{"body":"уга буга\n\nуга буга!\n\nуга буга\n\nуга буга\n\n","id":"https://freecx.github.io/2024-04-01-unga-bunga/","title":"Уга буга < 100"},"https://freecx.github.io/2024-12-26-what/":{"body":"\n\n  \n\n\n  \n\n\n  ▲\n  \n  ▼\n  \n  ⏸\n  ➜\n  \n  □\n  ■\n  \n  ⭯\n\n\n","id":"https://freecx.github.io/2024-12-26-what/","title":"Что?"}},"docInfo":{"https://freecx.github.io/":{"body":0,"title":0},"https://freecx.github.io/2016-02-04-working-with-vector-in-rust/":{"body":58,"title":3},"https://freecx.github.io/2016-02-15-working-with-docker/":{"body":150,"title":1},"https://freecx.github.io/2016-09-07-sound-generator-for-morse/":{"body":15,"title":0},"https://freecx.github.io/2016-12-26-python-music-synth/":{"body":35,"title":1},"https://freecx.github.io/2017-09-14-simple-logic/":{"body":58,"title":0},"https://freecx.github.io/2019-08-29-simple-register-vm/":{"body":134,"title":0},"https://freecx.github.io/2020-02-22-biguint-fib/":{"body":66,"title":0},"https://freecx.github.io/2020-02-26-cellular-automaton/":{"body":17,"title":0},"https://freecx.github.io/2020-07-23-2-5d-effect/":{"body":41,"title":1},"https://freecx.github.io/2020-09-04-simple-git-server/":{"body":11,"title":1},"https://freecx.github.io/2020-09-05-fake-git-server/":{"body":39,"title":1},"https://freecx.github.io/2020-09-25-l-systems/":{"body":45,"title":1},"https://freecx.github.io/2021-01-11-qr-video/":{"body":8,"title":1},"https://freecx.github.io/2021-01-13-password-box/":{"body":14,"title":0},"https://freecx.github.io/2021-02-20-data-coding/":{"body":38,"title":0},"https://freecx.github.io/2021-04-14-find-a-cat/":{"body":80,"title":0},"https://freecx.github.io/2021-12-29-bf-interp/":{"body":34,"title":1},"https://freecx.github.io/2022-04-11-bf-llvm/":{"body":44,"title":2},"https://freecx.github.io/2023-03-27-easy-gamedev/":{"body":37,"title":0},"https://freecx.github.io/2023-12-02-micro-http/":{"body":81,"title":0},"https://freecx.github.io/2024-04-01-unga-bunga/":{"body":0,"title":1},"https://freecx.github.io/2024-12-26-what/":{"body":0,"title":0}},"length":23},"lang":"English"}